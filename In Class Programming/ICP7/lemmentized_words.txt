Python
(
programming
language
)
-
Wikipedia
document.documentElement.className
=
document.documentElement.className.replace
(
/
(
^|\s
)
client-nojs
(
\s|
$
)
/
,
``
$
1client-js
$
2
''
)
;
(
window.RLQ=window.RLQ||
[
]
)
.push
(
function
(
)
{
mw.config.set
(
{
``
wgCanonicalNamespace
''
:
''
''
,
''
wgCanonicalSpecialPageName
''
:
false
,
''
wgNamespaceNumber
''
:0
,
''
wgPageName
''
:
''
Python_
(
programming_language
)
''
,
''
wgTitle
''
:
''
Python
(
programming
language
)
''
,
''
wgCurRevisionId
''
:861636160
,
''
wgRevisionId
''
:861636160
,
''
wgArticleId
''
:23862
,
''
wgIsArticle
''
:
true
,
''
wgIsRedirect
''
:
false
,
''
wgAction
''
:
''
view
''
,
''
wgUserName
''
:
null
,
''
wgUserGroups
''
:
[
``
*
''
]
,
''
wgCategories
''
:
[
``
CS1
error
:
external
link
''
,
''
Wikipedia
semi-protected
page
''
,
''
All
article
with
unsourced
statement
''
,
''
Articles
with
unsourced
statement
from
October
2017
''
,
''
Wikipedia
article
needing
clarification
from
May
2018
''
,
''
Articles
with
unsourced
statement
from
May
2018
''
,
''
Articles
containing
potentially
dated
statement
from
March
2018
''
,
''
All
article
containing
potentially
dated
statement
''
,
''
Articles
containing
potentially
dated
statement
from
August
2016
''
,
''
Articles
containing
potentially
dated
statement
from
January
2018
''
,
''
Articles
with
Curlie
link
''
,
''
Wikipedia
article
with
BNF
identifier
''
,
''
Wikipedia
article
with
GND
identifier
''
,
''
Wikipedia
article
with
LCCN
identifier
''
,
''
Wikipedia
article
with
SUDOC
identifier
''
,
''
Good
article
''
,
''
Use
dmy
date
from
August
2015
''
,
''
Programming
language
''
,
''
Class-based
programming
language
''
,
''
Computational
notebook
''
,
''
Computer
science
in
the
Netherlands
''
,
''
Cross-platform
free
software
''
,
''
Dutch
invention
''
,
''
Dynamically
typed
programming
language
''
,
''
Educational
programming
language
''
,
''
High-level
programming
language
''
,
''
Information
technology
in
the
Netherlands
''
,
''
Object-oriented
programming
language
''
,
''
Programming
language
created
in
1991
''
,
''
Python
(
programming
language
)
''
,
''
Scripting
language
''
,
''
Text-oriented
programming
language
''
,
''
Cross-platform
software
''
]
,
''
wgBreakFrames
''
:
false
,
''
wgPageContentLanguage
''
:
''
en
''
,
''
wgPageContentModel
''
:
''
wikitext
''
,
''
wgSeparatorTransformTable
''
:
[
``
''
,
''
''
]
,
''
wgDigitTransformTable
''
:
[
``
''
,
''
''
]
,
''
wgDefaultDateFormat
''
:
''
dmy
''
,
''
wgMonthNames
''
:
[
``
''
,
''
January
''
,
''
February
''
,
''
March
''
,
''
April
''
,
''
May
''
,
''
June
''
,
''
July
''
,
''
August
''
,
''
September
''
,
''
October
''
,
''
November
''
,
''
December
''
]
,
''
wgMonthNamesShort
''
:
[
``
''
,
''
Jan
''
,
''
Feb
''
,
''
Mar
''
,
''
Apr
''
,
''
May
''
,
''
Jun
''
,
''
Jul
''
,
''
Aug
''
,
''
Sep
''
,
''
Oct
''
,
''
Nov
''
,
''
Dec
''
]
,
''
wgRelevantPageName
''
:
''
Python_
(
programming_language
)
''
,
''
wgRelevantArticleId
''
:23862
,
''
wgRequestId
''
:
''
W7frOQrAADUAAJHr-usAAABS
''
,
''
wgCSPNonce
''
:
false
,
''
wgIsProbablyEditable
''
:
false
,
''
wgRelevantPageIsProbablyEditable
''
:
false
,
''
wgRestrictionEdit
''
:
[
``
autoconfirmed
''
]
,
''
wgRestrictionMove
''
:
[
]
,
''
wgFlaggedRevsParams
''
:
{
``
tag
''
:
{
}
}
,
''
wgStableRevisionId
''
:
null
,
''
wgCategoryTreePageCategoryOptions
''
:
''
{
\
''
mode\
''
:0
,
\
''
hideprefix\
''
:20
,
\
''
showcount\
''
:
true
,
\
''
namespaces\
''
:
false
}
''
,
''
wgWikiEditorEnabledModules
''
:
[
]
,
''
wgBetaFeaturesFeatures
''
:
[
]
,
''
wgMediaViewerOnClick
''
:
true
,
''
wgMediaViewerEnabledByDefault
''
:
true
,
''
wgPopupsShouldSendModuleToUser
''
:
true
,
''
wgPopupsConflictsWithNavPopupGadget
''
:
false
,
''
wgVisualEditor
''
:
{
``
pageLanguageCode
''
:
''
en
''
,
''
pageLanguageDir
''
:
''
ltr
''
,
''
pageVariantFallbacks
''
:
''
en
''
,
''
usePageImages
''
:
true
,
''
usePageDescriptions
''
:
true
}
,
''
wgMFExpandAllSectionsUserOption
''
:
true
,
''
wgMFEnableFontChanger
''
:
true
,
''
wgMFDisplayWikibaseDescriptions
''
:
{
``
search
''
:
true
,
''
nearby
''
:
true
,
''
watchlist
''
:
true
,
''
tagline
''
:
false
}
,
''
wgRelatedArticles
''
:
null
,
''
wgRelatedArticlesUseCirrusSearch
''
:
true
,
''
wgRelatedArticlesOnlyUseCirrusSearch
''
:
false
,
''
wgULSCurrentAutonym
''
:
''
English
''
,
''
wgNoticeProject
''
:
''
wikipedia
''
,
''
wgCentralNoticeCookiesToDelete
''
:
[
]
,
''
wgCentralNoticeCategoriesUsingLegacy
''
:
[
``
Fundraising
''
,
''
fundraising
''
]
,
''
wgWikibaseItemId
''
:
''
Q28865
''
,
''
wgScoreNoteLanguages
''
:
{
``
arabic
''
:
''
العربية
''
,
''
catalan
''
:
''
català
''
,
''
deutsch
''
:
''
Deutsch
''
,
''
english
''
:
''
English
''
,
''
espanol
''
:
''
español
''
,
''
italiano
''
:
''
italiano
''
,
''
nederland
''
:
''
Nederlands
''
,
''
norsk
''
:
''
norsk
''
,
''
portugues
''
:
''
português
''
,
''
suomi
''
:
''
suomi
''
,
''
svenska
''
:
''
svenska
''
,
''
vlaams
''
:
''
West-Vlams
''
}
,
''
wgScoreDefaultNoteLanguage
''
:
''
nederland
''
,
''
wgCentralAuthMobileDomain
''
:
false
,
''
wgCodeMirrorEnabled
''
:
true
,
''
wgVisualEditorToolbarScrollOffset
''
:0
,
''
wgVisualEditorUnsupportedEditParams
''
:
[
``
undo
''
,
''
undoafter
''
,
''
veswitched
''
]
,
''
wgEditSubmitButtonLabelPublish
''
:
true
}
)
;
mw.loader.state
(
{
``
ext.gadget.charinsert-styles
''
:
''
ready
''
,
''
ext.globalCssJs.user.styles
''
:
''
ready
''
,
''
ext.globalCssJs.site.styles
''
:
''
ready
''
,
''
site.styles
''
:
''
ready
''
,
''
noscript
''
:
''
ready
''
,
''
user.styles
''
:
''
ready
''
,
''
ext.globalCssJs.user
''
:
''
ready
''
,
''
ext.globalCssJs.site
''
:
''
ready
''
,
''
user
''
:
''
ready
''
,
''
user.options
''
:
''
ready
''
,
''
user.tokens
''
:
''
loading
''
,
''
ext.cite.styles
''
:
''
ready
''
,
''
mediawiki.legacy.shared
''
:
''
ready
''
,
''
mediawiki.legacy.commonPrint
''
:
''
ready
''
,
''
mediawiki.toc.styles
''
:
''
ready
''
,
''
wikibase.client.init
''
:
''
ready
''
,
''
ext.visualEditor.desktopArticleTarget.noscript
''
:
''
ready
''
,
''
ext.uls.interlanguage
''
:
''
ready
''
,
''
ext.wikimediaBadges
''
:
''
ready
''
,
''
ext.3d.styles
''
:
''
ready
''
,
''
mediawiki.skinning.interface
''
:
''
ready
''
,
''
skins.vector.styles
''
:
''
ready
''
}
)
;
mw.loader.implement
(
``
user.tokens
@
0tffind
''
,
function
(
$
,
jQuery
,
require
,
module
)
{
/*
@
nomin*/mw.user.tokens.set
(
{
``
editToken
''
:
''
+\\
''
,
''
patrolToken
''
:
''
+\\
''
,
''
watchToken
''
:
''
+\\
''
,
''
csrfToken
''
:
''
+\\
''
}
)
;
}
)
;
RLPAGEMODULES=
[
``
ext.cite.a11y
''
,
''
site
''
,
''
mediawiki.page.startup
''
,
''
mediawiki.user
''
,
''
mediawiki.page.ready
''
,
''
mediawiki.toc
''
,
''
mediawiki.searchSuggest
''
,
''
ext.gadget.teahouse
''
,
''
ext.gadget.ReferenceTooltips
''
,
''
ext.gadget.watchlist-notice
''
,
''
ext.gadget.DRN-wizard
''
,
''
ext.gadget.charinsert
''
,
''
ext.gadget.refToolbar
''
,
''
ext.gadget.extra-toolbar-buttons
''
,
''
ext.gadget.switcher
''
,
''
ext.centralauth.centralautologin
''
,
''
mmv.head
''
,
''
mmv.bootstrap.autostart
''
,
''
ext.popups
''
,
''
ext.visualEditor.desktopArticleTarget.init
''
,
''
ext.visualEditor.targetLoader
''
,
''
ext.eventLogging.subscriber
''
,
''
ext.wikimediaEvents
''
,
''
ext.navigationTiming
''
,
''
ext.uls.eventlogger
''
,
''
ext.uls.init
''
,
''
ext.uls.compactlinks
''
,
''
ext.uls.interface
''
,
''
ext.3d
''
,
''
ext.centralNotice.geoIP
''
,
''
ext.centralNotice.startUp
''
,
''
skins.vector.js
''
]
;
mw.loader.load
(
RLPAGEMODULES
)
;
}
)
;
Python
(
programming
language
)
From
Wikipedia
,
the
free
encyclopedia
Jump
to
navigation
Jump
to
search
Python
Paradigm
Object-oriented
,
imperative
,
functional
,
procedural
,
reflectiveDesigned
by
Guido
van
RossumDeveloper
Python
Software
FoundationFirst
appeared
1990
;
28
year
ago
(
1990
)
[
1
]
Stable
release
3.7.0
/
27
June
2018
;
3
month
ago
(
2018-06-27
)
[
2
]
2.7.15
/
1
May
2018
;
5
month
ago
(
2018-05-01
)
[
3
]
Typing
discipline
Duck
,
dynamic
,
strong
since
version
3.5
:
Gradual
[
4
]
License
Python
Software
Foundation
LicenseFilename
extension
.py
,
.pyc
,
.pyd
,
.pyo
(
prior
to
3.5
)
,
[
5
]
.pyw
,
.pyz
(
since
3.5
)
[
6
]
Website
www.python.orgMajor
implementation
CPython
,
IronPython
,
Jython
,
MicroPython
,
Numba
,
PyPy
,
Stackless
PythonDialects
Cython
,
RPythonInfluenced
by
ABC
,
[
7
]
ALGOL
68
,
[
8
]
APL
[
9
]
C
,
[
10
]
C++
,
[
11
]
CLU
,
[
12
]
Dylan
,
[
13
]
Haskell
,
[
14
]
Icon
,
[
15
]
Java
,
[
16
]
Lisp
,
[
17
]
Modula-3
,
[
11
]
Perl
,
Standard
ML
[
18
]
Influenced
Boo
,
Cobra
,
CoffeeScript
,
[
19
]
D
,
F
#
,
Falcon
,
Genie
,
[
20
]
Go
,
Apache
Groovy
,
JavaScript
,
[
21
]
[
22
]
Julia
,
[
23
]
Nim
,
Ring
,
[
24
]
Ruby
,
[
25
]
Swift
[
26
]
Python
Programming
at
Wikibooks
Python
is
an
interpreted
high-level
programming
language
for
general-purpose
programming
.
Created
by
Guido
van
Rossum
and
first
released
in
1991
,
Python
ha
a
design
philosophy
that
emphasizes
code
readability
,
notably
using
significant
whitespace
.
It
provides
construct
that
enable
clear
programming
on
both
small
and
large
scale
.
[
27
]
In
July
2018
,
Van
Rossum
stepped
down
a
the
leader
in
the
language
community
after
30
year
.
[
28
]
[
29
]
Python
feature
a
dynamic
type
system
and
automatic
memory
management
.
It
support
multiple
programming
paradigm
,
including
object-oriented
,
imperative
,
functional
and
procedural
,
and
ha
a
large
and
comprehensive
standard
library
.
[
30
]
Python
interpreter
are
available
for
many
operating
system
.
CPython
,
the
reference
implementation
of
Python
,
is
open
source
software
[
31
]
and
ha
a
community-based
development
model
,
a
do
nearly
all
of
Python
's
other
implementation
.
Python
and
CPython
are
managed
by
the
non-profit
Python
Software
Foundation
.
Contents
1
History
2
Features
and
philosophy
3
Syntax
and
semantics
3.1
Indentation
3.2
Statements
and
control
flow
3.3
Expressions
3.4
Methods
3.5
Typing
3.6
Mathematics
4
Libraries
4.1
Terminology
:
Modules
and
package
5
Development
environment
6
Implementations
6.1
Reference
implementation
6.2
Other
implementation
6.3
Unsupported
implementation
6.4
Cross-compilers
to
other
language
6.5
Performance
7
Development
8
Naming
9
API
documentation
generator
10
Uses
11
Languages
influenced
by
Python
12
See
also
13
References
14
Further
reading
15
External
link
History
Guido
van
Rossum
,
the
creator
of
Python
Main
article
:
History
of
Python
Python
wa
conceived
in
the
late
1980s
,
[
32
]
and
it
implementation
began
in
December
1989
[
33
]
by
Guido
van
Rossum
at
Centrum
Wiskunde
&
Informatica
(
CWI
)
in
the
Netherlands
a
a
successor
to
the
ABC
language
(
itself
inspired
by
SETL
)
[
34
]
capable
of
exception
handling
and
interfacing
with
the
Amoeba
operating
system
.
[
7
]
Van
Rossum
remains
Python
's
principal
author
.
His
continuing
central
role
in
Python
's
development
is
reflected
in
the
title
given
to
him
by
the
Python
community
:
Benevolent
Dictator
For
Life
(
BDFL
)
–
a
post
from
which
he
gave
himself
permanent
vacation
on
July
12
,
2018
.
[
35
]
On
the
origin
of
Python
,
Van
Rossum
wrote
in
1996
:
[
36
]
.mw-parser-output
.templatequote
{
overflow
:
hidden
;
margin:1em
0
;
padding:0
40px
}
.mw-parser-output
.templatequote
.templatequotecite
{
line-height:1.5em
;
text-align
:
left
;
padding-left:1.6em
;
margin-top:0
}
...
In
December
1989
,
I
wa
looking
for
a
``
hobby
''
programming
project
that
would
keep
me
occupied
during
the
week
around
Christmas
.
My
office
...
would
be
closed
,
but
I
had
a
home
computer
,
and
not
much
else
on
my
hand
.
I
decided
to
write
an
interpreter
for
the
new
scripting
language
I
had
been
thinking
about
lately
:
a
descendant
of
ABC
that
would
appeal
to
Unix/C
hacker
.
I
chose
Python
a
a
working
title
for
the
project
,
being
in
a
slightly
irreverent
mood
(
and
a
big
fan
of
Monty
Python
's
Flying
Circus
)
.
—
Guido
van
Rossum
Python
2.0
wa
released
on
16
October
2000
and
had
many
major
new
feature
,
including
a
cycle-detecting
garbage
collector
and
support
for
Unicode
.
With
this
release
,
the
development
process
became
more
transparent
and
community-backed
.
[
37
]
Python
3.0
(
initially
called
Python
3000
or
py3k
)
wa
released
on
3
December
2008
after
a
long
testing
period
.
It
is
a
major
revision
of
the
language
that
is
not
completely
backward-compatible
with
previous
version
.
[
38
]
However
,
many
of
it
major
feature
have
been
backported
to
the
Python
2.6.x
[
39
]
and
2.7.x
version
series
,
and
release
of
Python
3
include
the
2to3
utility
,
which
automates
the
translation
of
Python
2
code
to
Python
3
.
[
40
]
Python
2.7
's
end-of-life
date
wa
initially
set
at
2015
,
then
postponed
to
2020
out
of
concern
that
a
large
body
of
existing
code
could
not
easily
be
forward-ported
to
Python
3
.
[
41
]
[
42
]
In
January
2017
,
Google
announced
work
on
a
Python
2.7
to
Go
transcompiler
to
improve
performance
under
concurrent
workload
.
[
43
]
Features
and
philosophy
Python
is
a
multi-paradigm
programming
language
.
Object-oriented
programming
and
structured
programming
are
fully
supported
,
and
many
of
it
feature
support
functional
programming
and
aspect-oriented
programming
(
including
by
metaprogramming
[
44
]
and
metaobjects
(
magic
method
)
)
.
[
45
]
Many
other
paradigm
are
supported
via
extension
,
including
design
by
contract
[
46
]
[
47
]
and
logic
programming
.
[
48
]
Python
us
dynamic
typing
,
and
a
combination
of
reference
counting
and
a
cycle-detecting
garbage
collector
for
memory
management
.
It
also
feature
dynamic
name
resolution
(
late
binding
)
,
which
bind
method
and
variable
name
during
program
execution
.
Python
's
design
offer
some
support
for
functional
programming
in
the
Lisp
tradition
.
It
ha
filter
(
)
,
map
(
)
,
and
reduce
(
)
function
;
list
comprehension
,
dictionary
,
and
set
;
and
generator
expression
.
[
49
]
The
standard
library
ha
two
module
(
itertools
and
functools
)
that
implement
functional
tool
borrowed
from
Haskell
and
Standard
ML
.
[
50
]
The
language
's
core
philosophy
is
summarized
in
the
document
The
Zen
of
Python
(
PEP
20
)
,
which
includes
aphorism
such
a
:
[
51
]
Beautiful
is
better
than
ugly
Explicit
is
better
than
implicit
Simple
is
better
than
complex
Complex
is
better
than
complicated
Readability
count
Rather
than
having
all
of
it
functionality
built
into
it
core
,
Python
wa
designed
to
be
highly
extensible
.
This
compact
modularity
ha
made
it
particularly
popular
a
a
mean
of
adding
programmable
interface
to
existing
application
.
Van
Rossum
's
vision
of
a
small
core
language
with
a
large
standard
library
and
easily
extensible
interpreter
stemmed
from
his
frustration
with
ABC
,
which
espoused
the
opposite
approach
.
[
32
]
While
offering
choice
in
coding
methodology
,
the
Python
philosophy
reject
exuberant
syntax
(
such
a
that
of
Perl
)
in
favor
of
a
simpler
,
less-cluttered
grammar
.
As
Alex
Martelli
put
it
:
``
To
describe
something
a
'clever
'
is
not
considered
a
compliment
in
the
Python
culture
.
``
[
52
]
Python
's
philosophy
reject
the
Perl
``
there
is
more
than
one
way
to
do
it
''
approach
to
language
design
in
favor
of
``
there
should
be
one—and
preferably
only
one—obvious
way
to
do
it
''
.
[
51
]
Python
's
developer
strive
to
avoid
premature
optimization
,
and
reject
patch
to
non-critical
part
of
CPython
that
would
offer
marginal
increase
in
speed
at
the
cost
of
clarity
.
[
53
]
When
speed
is
important
,
a
Python
programmer
can
move
time-critical
function
to
extension
module
written
in
language
such
a
C
,
or
use
PyPy
,
a
just-in-time
compiler
.
Cython
is
also
available
,
which
translates
a
Python
script
into
C
and
make
direct
C-level
API
call
into
the
Python
interpreter
.
An
important
goal
of
Python
's
developer
is
keeping
it
fun
to
use
.
This
is
reflected
in
the
language
's
name—a
tribute
to
the
British
comedy
group
Monty
Python
[
54
]
—and
in
occasionally
playful
approach
to
tutorial
and
reference
material
,
such
a
example
that
refer
to
spam
and
egg
(
from
a
famous
Monty
Python
sketch
)
instead
of
the
standard
foo
and
bar
.
[
55
]
[
56
]
A
common
neologism
in
the
Python
community
is
pythonic
,
which
can
have
a
wide
range
of
meaning
related
to
program
style
.
To
say
that
code
is
pythonic
is
to
say
that
it
us
Python
idiom
well
,
that
it
is
natural
or
show
fluency
in
the
language
,
that
it
conforms
with
Python
's
minimalist
philosophy
and
emphasis
on
readability
.
In
contrast
,
code
that
is
difficult
to
understand
or
read
like
a
rough
transcription
from
another
programming
language
is
called
unpythonic
.
Users
and
admirer
of
Python
,
especially
those
considered
knowledgeable
or
experienced
,
are
often
referred
to
a
Pythonists
,
Pythonistas
,
and
Pythoneers
.
[
57
]
[
58
]
Syntax
and
semantics
Main
article
:
Python
syntax
and
semantics
Python
is
meant
to
be
an
easily
readable
language
.
Its
formatting
is
visually
uncluttered
,
and
it
often
us
English
keywords
where
other
language
use
punctuation
.
Unlike
many
other
language
,
it
doe
not
use
curly
bracket
to
delimit
block
,
and
semicolon
after
statement
are
optional
.
It
ha
fewer
syntactic
exception
and
special
case
than
C
or
Pascal
.
[
59
]
Indentation
Main
article
:
Python
syntax
and
semantics
§
Indentation
Python
us
whitespace
indentation
,
rather
than
curly
bracket
or
keywords
,
to
delimit
block
.
An
increase
in
indentation
come
after
certain
statement
;
a
decrease
in
indentation
signifies
the
end
of
the
current
block
.
[
60
]
Thus
,
the
program
's
visual
structure
accurately
represents
the
program
's
semantic
structure
.
[
1
]
This
feature
is
also
sometimes
termed
the
off-side
rule
.
Statements
and
control
flow
Python
's
statement
include
(
among
others
)
:
The
assignment
statement
(
token
'=
'
,
the
equal
sign
)
.
This
operates
differently
than
in
traditional
imperative
programming
language
,
and
this
fundamental
mechanism
(
including
the
nature
of
Python
's
version
of
variable
)
illuminates
many
other
feature
of
the
language
.
Assignment
in
C
,
e.g.
,
x
=
2
,
translates
to
``
typed
variable
name
x
receives
a
copy
of
numeric
value
2
''
.
The
(
right-hand
)
value
is
copied
into
an
allocated
storage
location
for
which
the
(
left-hand
)
variable
name
is
the
symbolic
address
.
The
memory
allocated
to
the
variable
is
large
enough
(
potentially
quite
large
)
for
the
declared
type
.
In
the
simplest
case
of
Python
assignment
,
using
the
same
example
,
x
=
2
,
translates
to
``
(
generic
)
name
x
receives
a
reference
to
a
separate
,
dynamically
allocated
object
of
numeric
(
int
)
type
of
value
2
.
''
This
is
termed
binding
the
name
to
the
object
.
Since
the
name
's
storage
location
doe
n't
contain
the
indicated
value
,
it
is
improper
to
call
it
a
variable
.
Names
may
be
subsequently
rebound
at
any
time
to
object
of
greatly
varying
type
,
including
string
,
procedure
,
complex
object
with
data
and
method
,
etc
.
Successive
assignment
of
a
common
value
to
multiple
name
,
e.g.
,
x
=
2
;
y
=
2
;
z
=
2
result
in
allocating
storage
to
(
at
most
)
three
name
and
one
numeric
object
,
to
which
all
three
name
are
bound
.
Since
a
name
is
a
generic
reference
holder
it
is
unreasonable
to
associate
a
fixed
data
type
with
it
.
However
at
a
given
time
a
name
will
be
bound
to
some
object
,
which
will
have
a
type
;
thus
there
is
dynamic
typing
.
The
if
statement
,
which
conditionally
executes
a
block
of
code
,
along
with
else
and
elif
(
a
contraction
of
else-if
)
.
The
for
statement
,
which
iterates
over
an
iterable
object
,
capturing
each
element
to
a
local
variable
for
use
by
the
attached
block
.
The
while
statement
,
which
executes
a
block
of
code
a
long
a
it
condition
is
true
.
The
try
statement
,
which
allows
exception
raised
in
it
attached
code
block
to
be
caught
and
handled
by
except
clause
;
it
also
ensures
that
clean-up
code
in
a
finally
block
will
always
be
run
regardless
of
how
the
block
exit
.
The
raise
statement
,
used
to
raise
a
specified
exception
or
re-raise
a
caught
exception
.
The
class
statement
,
which
executes
a
block
of
code
and
attache
it
local
namespace
to
a
class
,
for
use
in
object-oriented
programming
.
The
def
statement
,
which
defines
a
function
or
method
.
The
with
statement
,
from
Python
2.5
released
on
September
2006
,
[
61
]
which
encloses
a
code
block
within
a
context
manager
(
for
example
,
acquiring
a
lock
before
the
block
of
code
is
run
and
releasing
the
lock
afterwards
,
or
opening
a
file
and
then
closing
it
)
,
allowing
Resource
Acquisition
Is
Initialization
(
RAII
)
-like
behavior
and
replaces
a
common
try/finally
idiom
.
[
62
]
The
pas
statement
,
which
serf
a
a
NOP
.
It
is
syntactically
needed
to
create
an
empty
code
block
.
The
assert
statement
,
used
during
debugging
to
check
for
condition
that
ought
to
apply
.
The
yield
statement
,
which
return
a
value
from
a
generator
function
.
From
Python
2.5
,
yield
is
also
an
operator
.
This
form
is
used
to
implement
coroutines
.
The
import
statement
,
which
is
used
to
import
module
whose
function
or
variable
can
be
used
in
the
current
program
.
There
are
three
way
of
using
import
:
import
<
module
name
>
[
a
<
alias
>
]
or
from
<
module
name
>
import
*
or
from
<
module
name
>
import
<
definition
1
>
[
a
<
alias
1
>
]
,
<
definition
2
>
[
a
<
alias
2
>
]
,
...
.
The
print
statement
wa
changed
to
the
print
(
)
function
in
Python
3
.
[
63
]
Python
doe
not
support
tail
call
optimization
or
first-class
continuation
,
and
,
according
to
Guido
van
Rossum
,
it
never
will
.
[
64
]
[
65
]
However
,
better
support
for
coroutine-like
functionality
is
provided
in
2.5
,
by
extending
Python
's
generator
.
[
66
]
Before
2.5
,
generator
were
lazy
iterators
;
information
wa
passed
unidirectionally
out
of
the
generator
.
From
Python
2.5
,
it
is
possible
to
pas
information
back
into
a
generator
function
,
and
from
Python
3.3
,
the
information
can
be
passed
through
multiple
stack
level
.
[
67
]
Expressions
Some
Python
expression
are
similar
to
language
such
a
C
and
Java
,
while
some
are
not
:
Addition
,
subtraction
,
and
multiplication
are
the
same
,
but
the
behavior
of
division
differs
.
There
are
two
type
of
division
in
Python
.
They
are
floor
division
and
integer
division
.
[
68
]
Python
also
added
the
**
operator
for
exponentiation
.
From
Python
3.5
,
the
new
@
infix
operator
wa
introduced
.
It
is
intended
to
be
used
by
library
such
a
NumPy
for
matrix
multiplication
.
[
69
]
[
70
]
In
Python
,
==
compare
by
value
,
versus
Java
,
which
compare
numerics
by
value
[
71
]
and
object
by
reference
.
[
72
]
(
Value
comparison
in
Java
on
object
can
be
performed
with
the
equal
(
)
method
.
)
Python
's
is
operator
may
be
used
to
compare
object
identity
(
comparison
by
reference
)
.
In
Python
,
comparison
may
be
chained
,
for
example
a
<
=
b
<
=
c.
Python
us
the
word
and
,
or
,
not
for
it
boolean
operator
rather
than
the
symbolic
&
&
,
||
,
!
used
in
Java
and
C.
Python
ha
a
type
of
expression
termed
a
list
comprehension
.
Python
2.4
extended
list
comprehension
into
a
more
general
expression
termed
a
generator
expression
.
[
49
]
Anonymous
function
are
implemented
using
lambda
expression
;
however
,
these
are
limited
in
that
the
body
can
only
be
one
expression
.
Conditional
expression
in
Python
are
written
a
x
if
c
else
y
[
73
]
(
different
in
order
of
operand
from
the
c
?
x
:
y
operator
common
to
many
other
language
)
.
Python
make
a
distinction
between
list
and
tuples
.
Lists
are
written
a
[
1
,
2
,
3
]
,
are
mutable
,
and
can
not
be
used
a
the
key
of
dictionary
(
dictionary
key
must
be
immutable
in
Python
)
.
Tuples
are
written
a
(
1
,
2
,
3
)
,
are
immutable
and
thus
can
be
used
a
the
key
of
dictionary
,
provided
all
element
of
the
tuple
are
immutable
.
The
+
operator
can
be
used
to
concatenate
two
tuples
,
which
doe
not
directly
modify
their
content
,
but
rather
produce
a
new
tuple
containing
the
element
of
both
provided
tuples
.
Thus
,
given
the
variable
t
initially
equal
to
(
1
,
2
,
3
)
,
executing
t
=
t
+
(
4
,
5
)
first
evaluates
t
+
(
4
,
5
)
,
which
yield
(
1
,
2
,
3
,
4
,
5
)
,
which
is
then
assigned
back
to
t
,
thereby
effectively
``
modifying
the
content
''
of
t
,
while
conforming
to
the
immutable
nature
of
tuple
object
.
Parentheses
are
optional
for
tuples
in
unambiguous
context
.
[
74
]
Python
feature
sequence
unpacking
where
multiple
expression
,
each
evaluating
to
anything
that
can
be
assigned
to
(
a
variable
,
a
writable
property
,
etc
.
)
,
are
associated
in
the
identical
manner
to
that
forming
tuple
literal
and
,
a
a
whole
,
are
put
on
the
left
hand
side
of
the
equal
sign
in
an
assignment
statement
.
The
statement
expects
an
iterable
object
on
the
right
hand
side
of
the
equal
sign
that
produce
the
same
number
of
value
a
the
provided
writable
expression
when
iterated
through
,
and
will
iterate
through
it
,
assigning
each
of
the
produced
value
to
the
corresponding
expression
on
the
left
.
[
citation
needed
]
Python
ha
a
``
string
format
''
operator
%
.
This
function
analogous
to
printf
format
string
in
C
,
e.g
.
``
spam=
%
s
eggs=
%
d
''
%
(
``
blah
''
,
2
)
evaluates
to
``
spam=blah
eggs=2
''
.
In
Python
3
and
2.6+
,
this
wa
supplemented
by
the
format
(
)
method
of
the
str
class
,
e.g
.
``
spam=
{
0
}
eggs=
{
1
}
''
.format
(
``
blah
''
,
2
)
.
Python
3.6
added
``
f-strings
''
:
blah
=
``
blah
''
;
egg
=
2
;
f'spam=
{
blah
}
eggs=
{
egg
}
'
.
[
75
]
Python
ha
various
kind
of
string
literal
:
Strings
delimited
by
single
or
double
quote
mark
.
Unlike
in
Unix
shell
,
Perl
and
Perl-influenced
language
,
single
quote
mark
and
double
quote
mark
function
identically
.
Both
kind
of
string
use
the
backslash
(
\
)
a
an
escape
character
.
String
interpolation
became
available
in
Python
3.6
a
``
formatted
string
literal
''
.
[
75
]
Triple-quoted
string
,
which
begin
and
end
with
a
series
of
three
single
or
double
quote
mark
.
They
may
span
multiple
line
and
function
like
here
document
in
shell
,
Perl
and
Ruby
.
Raw
string
variety
,
denoted
by
prefixing
the
string
literal
with
an
r.
Escape
sequence
are
not
interpreted
;
hence
raw
string
are
useful
where
literal
backslashes
are
common
,
such
a
regular
expression
and
Windows-style
path
.
Compare
``
@
-quoting
''
in
C
#
.
Python
ha
array
index
and
array
slicing
expression
on
list
,
denoted
a
a
[
key
]
,
a
[
start
:
stop
]
or
a
[
start
:
stop
:
step
]
.
Indexes
are
zero-based
,
and
negative
index
are
relative
to
the
end
.
Slices
take
element
from
the
start
index
up
to
,
but
not
including
,
the
stop
index
.
The
third
slice
parameter
,
called
step
or
stride
,
allows
element
to
be
skipped
and
reversed
.
Slice
index
may
be
omitted
,
for
example
a
[
:
]
return
a
copy
of
the
entire
list
.
Each
element
of
a
slice
is
a
shallow
copy
.
In
Python
,
a
distinction
between
expression
and
statement
is
rigidly
enforced
,
in
contrast
to
language
such
a
Common
Lisp
,
Scheme
,
or
Ruby
.
This
lead
to
duplicating
some
functionality
.
For
example
:
List
comprehension
vs.
for-loops
Conditional
expression
vs.
if
block
The
eval
(
)
vs.
exec
(
)
built-in
function
(
in
Python
2
,
exec
is
a
statement
)
;
the
former
is
for
expression
,
the
latter
is
for
statement
.
Statements
can
not
be
a
part
of
an
expression
,
so
list
and
other
comprehension
or
lambda
expression
,
all
being
expression
,
can
not
contain
statement
.
A
particular
case
of
this
is
that
an
assignment
statement
such
a
a
=
1
can
not
form
part
of
the
conditional
expression
of
a
conditional
statement
.
This
ha
the
advantage
of
avoiding
a
classic
C
error
of
mistaking
an
assignment
operator
=
for
an
equality
operator
==
in
condition
:
if
(
c
=
1
)
{
...
}
is
syntactically
valid
(
but
probably
unintended
)
C
code
but
if
c
=
1
:
...
cause
a
syntax
error
in
Python
.
Methods
Methods
on
object
are
function
attached
to
the
object
's
class
;
the
syntax
instance.method
(
argument
)
is
,
for
normal
method
and
function
,
syntactic
sugar
for
Class.method
(
instance
,
argument
)
.
Python
method
have
an
explicit
self
parameter
to
access
instance
data
,
in
contrast
to
the
implicit
self
(
or
this
)
in
some
other
object-oriented
programming
language
(
e.g.
,
C++
,
Java
,
Objective-C
,
or
Ruby
)
.
[
76
]
Typing
Python
us
duck
typing
and
ha
typed
object
but
untyped
variable
name
.
Type
constraint
are
not
checked
at
compile
time
;
rather
,
operation
on
an
object
may
fail
,
signifying
that
the
given
object
is
not
of
a
suitable
type
.
Despite
being
dynamically
typed
,
Python
is
strongly
typed
,
forbidding
operation
that
are
not
well-defined
(
for
example
,
adding
a
number
to
a
string
)
rather
than
silently
attempting
to
make
sense
of
them
.
Python
allows
programmer
to
define
their
own
type
using
class
,
which
are
most
often
used
for
object-oriented
programming
.
New
instance
of
class
are
constructed
by
calling
the
class
(
for
example
,
SpamClass
(
)
or
EggsClass
(
)
)
,
and
the
class
are
instance
of
the
metaclass
type
(
itself
an
instance
of
itself
)
,
allowing
metaprogramming
and
reflection
.
Before
version
3.0
,
Python
had
two
kind
of
class
:
old-style
and
new-style
.
[
77
]
The
syntax
of
both
style
is
the
same
,
the
difference
being
whether
the
class
object
is
inherited
from
,
directly
or
indirectly
(
all
new-style
class
inherit
from
object
and
are
instance
of
type
)
.
In
version
of
Python
2
from
Python
2.2
onwards
,
both
kind
of
class
can
be
used
.
Old-style
class
were
eliminated
in
Python
3.0
.
The
long
term
plan
is
to
support
gradual
typing
[
78
]
and
from
Python
3.5
,
the
syntax
of
the
language
allows
specifying
static
type
but
they
are
not
checked
in
the
default
implementation
,
CPython
.
An
experimental
optional
static
type
checker
named
mypy
support
compile-time
type
checking
.
[
79
]
Summary
of
Python
3
's
built-in
type
Type
mutable
Description
Syntax
example
bool
immutable
Boolean
value
TrueFalse
bytearray
mutable
Sequence
of
byte
bytearray
(
b'Some
ASCII
'
)
bytearray
(
b
''
Some
ASCII
''
)
bytearray
(
[
119
,
105
,
107
,
105
]
)
byte
immutable
Sequence
of
byte
b'Some
ASCII'b
''
Some
ASCII
''
byte
(
[
119
,
105
,
107
,
105
]
)
complex
immutable
Complex
number
with
real
and
imaginary
part
3+2.7j
dict
mutable
Associative
array
(
or
dictionary
)
of
key
and
value
pair
;
can
contain
mixed
type
(
key
and
value
)
,
key
must
be
a
hashable
type
{
'key1
'
:
1.0
,
3
:
False
}
ellipsis
An
ellipsis
placeholder
to
be
used
a
an
index
in
NumPy
array
...
float
immutable
Floating
point
number
,
system-defined
precision
3.1415927
frozenset
immutable
Unordered
set
,
contains
no
duplicate
;
can
contain
mixed
type
,
if
hashable
frozenset
(
[
4.0
,
'string
'
,
True
]
)
int
immutable
Integer
of
unlimited
magnitude
[
80
]
42
list
mutable
List
,
can
contain
mixed
type
[
4.0
,
'string
'
,
True
]
set
mutable
Unordered
set
,
contains
no
duplicate
;
can
contain
mixed
type
,
if
hashable
{
4.0
,
'string
'
,
True
}
str
immutable
A
character
string
:
sequence
of
Unicode
codepoints
'Wikipedia
'
''
Wikipedia
''
''
''
''
Spanningmultiplelines
''
''
''
tuple
immutable
Can
contain
mixed
type
(
4.0
,
'string
'
,
True
)
Mathematics
Python
ha
the
usual
C
language
arithmetic
operator
(
+
,
-
,
*
,
/
,
%
)
.
It
also
ha
**
for
exponentiation
,
e.g
.
5**3
==
125
and
9**0.5
==
3.0
,
and
a
new
matrix
multiply
@
operator
is
included
in
version
3.5
.
[
81
]
Additionally
,
it
ha
a
unary
operator
(
~
)
,
which
essentially
inverts
all
the
bit
of
it
one
argument
.
For
integer
,
this
mean
~x=-x-1
.
[
82
]
Other
operator
include
bitwise
shift
operator
x
<
<
y
,
which
shift
x
to
the
left
y
place
,
the
same
a
x*
(
2**y
)
,
and
x
>
>
y
,
which
shift
x
to
the
right
y
place
,
the
same
a
x//
(
2**y
)
.
[
83
]
The
behavior
of
division
ha
changed
significantly
over
time
:
[
84
]
[
why
?
]
Python
2.1
and
earlier
use
the
C
division
behavior
.
The
/
operator
is
integer
division
if
both
operand
are
integer
,
and
floating-point
division
otherwise
.
Integer
division
round
towards
0
,
e.g
.
7/3
==
2
and
-7/3
==
-2
.
Python
2.2
change
integer
division
to
round
towards
negative
infinity
,
e.g
.
7/3
==
2
and
-7/3
==
-3
.
The
floor
division
//
operator
is
introduced
.
So
7//3
==
2
,
-7//3
==
-3
,
7.5//3
==
2.0
and
-7.5//3
==
-3.0
.
Adding
from
__future__
import
division
cause
a
module
to
use
Python
3.0
rule
for
division
(
see
next
)
.
Python
3.0
change
/
to
be
always
floating-point
division
.
In
Python
term
,
the
pre-3.0
/
is
classic
division
,
the
version-3.0
/
is
real
division
,
and
//
is
floor
division
.
Rounding
towards
negative
infinity
,
though
different
from
most
language
,
add
consistency
.
For
instance
,
it
mean
that
the
equation
(
a
+
b
)
//b
==
a//b
+
1
is
always
true
.
It
also
mean
that
the
equation
b*
(
a//b
)
+
a
%
b
==
a
is
valid
for
both
positive
and
negative
value
of
a
.
However
,
maintaining
the
validity
of
this
equation
mean
that
while
the
result
of
a
%
b
is
,
a
expected
,
in
the
half-open
interval
[
0
,
b
)
,
where
b
is
a
positive
integer
,
it
ha
to
lie
in
the
interval
(
b
,
0
]
when
b
is
negative
.
[
85
]
Python
provides
a
round
function
for
rounding
a
float
to
the
nearest
integer
.
For
tie-breaking
,
version
before
3
use
round-away-from-zero
:
round
(
0.5
)
is
1.0
,
round
(
-0.5
)
is
−1.0
.
[
86
]
Python
3
us
round
to
even
:
round
(
1.5
)
is
2
,
round
(
2.5
)
is
2
.
[
87
]
Python
allows
boolean
expression
with
multiple
equality
relation
in
a
manner
that
is
consistent
with
general
use
in
mathematics
.
For
example
,
the
expression
a
<
b
<
c
test
whether
a
is
le
than
b
and
b
is
le
than
c.
[
88
]
C-derived
language
interpret
this
expression
differently
:
in
C
,
the
expression
would
first
evaluate
a
<
b
,
resulting
in
0
or
1
,
and
that
result
would
then
be
compared
with
c.
[
89
]
Python
ha
extensive
built-in
support
for
arbitrary
precision
arithmetic
.
Integers
are
transparently
switched
from
the
machine-supported
maximum
fixed-precision
(
usually
32
or
64
bit
)
,
belonging
to
the
python
type
int
,
to
arbitrary
precision
,
belonging
to
the
Python
type
long
,
where
needed
.
The
latter
have
an
``
L
''
suffix
in
their
textual
representation
.
[
90
]
(
In
Python
3
,
the
distinction
between
the
int
and
long
type
wa
eliminated
;
this
behavior
is
now
entirely
contained
by
the
int
class
.
)
The
Decimal
type/class
in
module
decimal
(
since
version
2.4
)
provides
decimal
floating
point
number
to
arbitrary
precision
and
several
rounding
mode
.
[
91
]
The
Fraction
type
in
module
fraction
(
since
version
2.6
)
provides
arbitrary
precision
for
rational
number
.
[
92
]
Due
to
Python
's
extensive
mathematics
library
,
and
the
third-party
library
NumPy
that
further
extends
the
native
capability
,
it
is
frequently
used
a
a
scientific
scripting
language
to
aid
in
problem
such
a
numerical
data
processing
and
manipulation
.
[
citation
needed
]
Libraries
Python
's
large
standard
library
,
commonly
cited
a
one
of
it
greatest
strength
,
[
93
]
provides
tool
suited
to
many
task
.
For
Internet-facing
application
,
many
standard
format
and
protocol
such
a
MIME
and
HTTP
are
supported
.
It
includes
module
for
creating
graphical
user
interface
,
connecting
to
relational
database
,
generating
pseudorandom
number
,
arithmetic
with
arbitrary
precision
decimal
,
[
94
]
manipulating
regular
expression
,
and
unit
testing
.
Some
part
of
the
standard
library
are
covered
by
specification
(
for
example
,
the
Web
Server
Gateway
Interface
(
WSGI
)
implementation
wsgiref
follows
PEP
333
[
95
]
)
,
but
most
module
are
not
.
They
are
specified
by
their
code
,
internal
documentation
,
and
test
suite
(
if
supplied
)
.
However
,
because
most
of
the
standard
library
is
cross-platform
Python
code
,
only
a
few
module
need
altering
or
rewriting
for
variant
implementation
.
As
of
March
2018
,
[
update
]
the
Python
Package
Index
(
PyPI
)
,
the
official
repository
for
third-party
Python
software
,
contains
over
130,000
[
96
]
package
with
a
wide
range
of
functionality
,
including
:
Graphical
user
interface
Web
framework
Multimedia
Databases
Networking
Test
framework
Automation
Web
scraping
[
97
]
Documentation
System
administration
Scientific
computing
Text
processing
Image
processing
Terminology
:
Modules
and
package
“
[
A
]
module
is
an
object
in
the
memory
of
a
Python
interpreter
,
often
created
by
reading
one
or
more
file
from
disk
”
,
[
98
]
and
“
a
package
is
a
Python
module
with
an
__path__
attribute
.
[
99
]
Development
environment
See
also
:
Comparison
of
integrated
development
environment
§
Python
Most
Python
implementation
(
including
CPython
)
include
a
read–eval–print
loop
(
REPL
)
,
permitting
them
to
function
a
a
command
line
interpreter
for
which
the
user
enters
statement
sequentially
and
receives
result
immediately
.
Other
shell
,
including
IDLE
and
IPython
,
add
further
ability
such
a
auto-completion
,
session
state
retention
and
syntax
highlighting
.
As
well
a
standard
desktop
integrated
development
environment
,
there
are
Web
browser-based
IDEs
;
SageMath
(
intended
for
developing
science
and
math-related
Python
program
)
;
PythonAnywhere
,
a
browser-based
IDE
and
hosting
environment
;
and
Canopy
IDE
,
a
commercial
Python
IDE
emphasizing
scientific
computing
.
[
100
]
Implementations
See
also
:
List
of
Python
software
§
Python
implementation
Reference
implementation
CPython
is
the
reference
implementation
of
Python
.
It
is
written
in
C
,
meeting
the
C89
standard
with
several
select
C99
feature
.
[
101
]
It
compiles
Python
program
into
an
intermediate
bytecode
[
102
]
which
is
then
executed
by
it
virtual
machine
.
[
103
]
CPython
is
distributed
with
a
large
standard
library
written
in
a
mixture
of
C
and
native
Python
.
It
is
available
for
many
platform
,
including
Windows
and
most
modern
Unix-like
system
.
Platform
portability
wa
one
of
it
earliest
priority
.
[
104
]
Other
implementation
PyPy
is
a
fast
,
compliant
[
105
]
interpreter
of
Python
2.7
and
3.5
.
Its
just-in-time
compiler
brings
a
significant
speed
improvement
over
CPython
.
[
106
]
Stackless
Python
is
a
significant
fork
of
CPython
that
implement
microthreads
;
it
doe
not
use
the
C
memory
stack
,
thus
allowing
massively
concurrent
program
.
PyPy
also
ha
a
stackless
version
.
[
107
]
MicroPython
and
CircuitPython
are
Python
3
variant
optimised
for
microcontrollers
.
Unsupported
implementation
Other
just-in-time
Python
compiler
have
been
developed
,
but
are
now
unsupported
:
Google
began
a
project
named
Unladen
Swallow
in
2009
with
the
aim
of
speeding
up
the
Python
interpreter
fivefold
by
using
the
LLVM
,
and
of
improving
it
multithreading
ability
to
scale
to
thousand
of
core
.
[
108
]
Psyco
is
a
just-in-time
specialising
compiler
that
integrates
with
CPython
and
transforms
bytecode
to
machine
code
at
runtime
.
The
emitted
code
is
specialised
for
certain
data
type
and
is
faster
than
standard
Python
code
.
In
2005
,
Nokia
released
a
Python
interpreter
for
the
Series
60
mobile
phone
named
PyS60
.
It
includes
many
of
the
module
from
the
CPython
implementation
and
some
additional
module
to
integrate
with
the
Symbian
operating
system
.
The
project
ha
been
kept
up-to-date
to
run
on
all
variant
of
the
S60
platform
,
and
several
third-party
module
are
available
.
The
Nokia
N900
also
support
Python
with
GTK
widget
library
,
enabling
program
to
be
written
and
run
on
the
target
device
.
[
109
]
Cross-compilers
to
other
language
There
are
several
compiler
to
high-level
object
language
,
with
either
unrestricted
Python
,
a
restricted
subset
of
Python
,
or
a
language
similar
to
Python
a
the
source
language
:
Jython
compiles
into
Java
byte
code
,
which
can
then
be
executed
by
every
Java
virtual
machine
implementation
.
This
also
enables
the
use
of
Java
class
library
function
from
the
Python
program
.
IronPython
follows
a
similar
approach
in
order
to
run
Python
program
on
the
.NET
Common
Language
Runtime
.
The
RPython
language
can
be
compiled
to
C
,
Java
bytecode
,
or
Common
Intermediate
Language
,
and
is
used
to
build
the
PyPy
interpreter
of
Python
.
Pyjs
compiles
Python
to
JavaScript
.
Cython
compiles
Python
to
C
and
C++
.
Pythran
compiles
Python
to
C++
.
Somewhat
dated
Pyrex
(
latest
release
in
2010
)
and
Shed
Skin
(
latest
release
in
2013
)
compile
to
C
and
C++
respectively
.
Google
's
Grumpy
compiles
Python
to
Go
.
MyHDL
compiles
Python
to
VHDL
.
Nuitka
compiles
Python
into
C++
[
110
]
Performance
A
performance
comparison
of
various
Python
implementation
on
a
non-numerical
(
combinatorial
)
workload
wa
presented
at
EuroSciPy
'13
.
[
111
]
Development
Python
's
development
is
conducted
largely
through
the
Python
Enhancement
Proposal
(
PEP
)
process
,
the
primary
mechanism
for
proposing
major
new
feature
,
collecting
community
input
on
issue
and
documenting
Python
design
decision
.
[
112
]
Outstanding
PEPs
are
reviewed
and
commented
on
by
the
Python
community
and
Guido
Van
Rossum
,
Python
's
Benevolent
Dictator
For
Life
.
[
112
]
Enhancement
of
the
language
corresponds
with
development
of
the
CPython
reference
implementation
.
The
mailing
list
python-dev
is
the
primary
forum
for
the
language
's
development
.
Specific
issue
are
discussed
in
the
Roundup
bug
tracker
maintained
at
python.org
.
[
113
]
Development
originally
took
place
on
a
self-hosted
source-code
repository
running
Mercurial
,
until
Python
moved
to
GitHub
in
January
2017
.
[
114
]
CPython
's
public
release
come
in
three
type
,
distinguished
by
which
part
of
the
version
number
is
incremented
:
Backward-incompatible
version
,
where
code
is
expected
to
break
and
need
to
be
manually
ported
.
The
first
part
of
the
version
number
is
incremented
.
These
release
happen
infrequently—for
example
,
version
3.0
wa
released
8
year
after
2.0
.
Major
or
``
feature
''
release
,
about
every
18
month
,
are
largely
compatible
but
introduce
new
feature
.
The
second
part
of
the
version
number
is
incremented
.
Each
major
version
is
supported
by
bugfixes
for
several
year
after
it
release
.
[
115
]
Bugfix
release
,
which
introduce
no
new
feature
,
occur
about
every
3
month
and
are
made
when
a
sufficient
number
of
bug
have
been
fixed
upstream
since
the
last
release
.
Security
vulnerability
are
also
patched
in
these
release
.
The
third
and
final
part
of
the
version
number
is
incremented
.
[
116
]
Many
alpha
,
beta
,
and
release-candidates
are
also
released
a
preview
and
for
testing
before
final
release
.
Although
there
is
a
rough
schedule
for
each
release
,
they
are
often
delayed
if
the
code
is
not
ready
.
Python
's
development
team
monitor
the
state
of
the
code
by
running
the
large
unit
test
suite
during
development
,
and
using
the
BuildBot
continuous
integration
system
.
[
117
]
The
community
of
Python
developer
ha
also
contributed
over
86,000
[
118
]
software
module
(
a
of
20
August
2016
[
update
]
)
to
the
Python
Package
Index
(
PyPI
)
,
the
official
repository
of
third-party
Python
library
.
The
major
academic
conference
on
Python
is
PyCon
.
There
are
also
special
Python
mentoring
programme
,
such
a
Pyladies
.
Naming
Python
's
name
is
derived
from
the
British
comedy
group
Monty
Python
,
whom
Python
creator
Guido
van
Rossum
enjoyed
while
developing
the
language
.
Monty
Python
reference
appear
frequently
in
Python
code
and
culture
;
[
119
]
for
example
,
the
metasyntactic
variable
often
used
in
Python
literature
are
spam
and
egg
instead
of
the
traditional
foo
and
bar
.
[
119
]
[
120
]
The
official
Python
documentation
also
contains
various
reference
to
Monty
Python
routine
.
[
121
]
[
122
]
The
prefix
Py-
is
used
to
show
that
something
is
related
to
Python
.
Examples
of
the
use
of
this
prefix
in
name
of
Python
application
or
library
include
Pygame
,
a
binding
of
SDL
to
Python
(
commonly
used
to
create
game
)
;
PyQt
and
PyGTK
,
which
bind
Qt
and
GTK
to
Python
respectively
;
and
PyPy
,
a
Python
implementation
originally
written
in
Python
.
API
documentation
generator
Python
API
documentation
generator
include
:
Sphinx
Epydoc
HeaderDoc
pydoc
Uses
Main
article
:
List
of
Python
software
Since
2003
,
Python
ha
consistently
ranked
in
the
top
ten
most
popular
programming
language
in
the
TIOBE
Programming
Community
Index
where
,
a
of
January
2018
[
update
]
,
it
is
the
fourth
most
popular
language
(
behind
Java
,
C
,
and
C++
)
.
[
123
]
It
wa
selected
Programming
Language
of
the
Year
in
2007
and
2010
.
[
124
]
An
empirical
study
found
that
scripting
language
,
such
a
Python
,
are
more
productive
than
conventional
language
,
such
a
C
and
Java
,
for
programming
problem
involving
string
manipulation
and
search
in
a
dictionary
,
and
determined
that
memory
consumption
wa
often
``
better
than
Java
and
not
much
worse
than
C
or
C++
''
.
[
125
]
Large
organization
that
use
Python
include
Wikipedia
,
Google
,
[
126
]
Yahoo
!
,
[
127
]
CERN
,
[
128
]
NASA
,
[
129
]
Facebook
,
[
130
]
Amazon
,
Instagram
,
Spotify
[
131
]
and
some
smaller
entity
like
ILM
[
132
]
and
ITA
.
[
133
]
The
social
news
networking
site
Reddit
is
written
entirely
in
Python
.
Python
can
serve
a
a
scripting
language
for
web
application
,
e.g.
,
via
mod_wsgi
for
the
Apache
web
server
.
[
134
]
With
Web
Server
Gateway
Interface
,
a
standard
API
ha
evolved
to
facilitate
these
application
.
Web
framework
like
Django
,
Pylons
,
Pyramid
,
TurboGears
,
web2py
,
Tornado
,
Flask
,
Bottle
and
Zope
support
developer
in
the
design
and
maintenance
of
complex
application
.
Pyjs
and
IronPython
can
be
used
to
develop
the
client-side
of
Ajax-based
application
.
SQLAlchemy
can
be
used
a
data
mapper
to
a
relational
database
.
Twisted
is
a
framework
to
program
communication
between
computer
,
and
is
used
(
for
example
)
by
Dropbox
.
Libraries
such
a
NumPy
,
SciPy
and
Matplotlib
allow
the
effective
use
of
Python
in
scientific
computing
,
[
135
]
[
136
]
with
specialized
library
such
a
Biopython
and
Astropy
providing
domain-specific
functionality
.
SageMath
is
a
mathematical
software
with
a
``
notebook
''
programmable
in
Python
:
it
library
cover
many
aspect
of
mathematics
,
including
algebra
,
combinatorics
,
numerical
mathematics
,
number
theory
,
and
calculus
.
Python
ha
been
successfully
embedded
in
many
software
product
a
a
scripting
language
,
including
in
finite
element
method
software
such
a
Abaqus
,
3D
parametric
modeler
like
FreeCAD
,
3D
animation
package
such
a
3d
Max
,
Blender
,
Cinema
4D
,
Lightwave
,
Houdini
,
Maya
,
modo
,
MotionBuilder
,
Softimage
,
the
visual
effect
compositor
Nuke
,
2D
imaging
program
like
GIMP
,
[
137
]
Inkscape
,
Scribus
and
Paint
Shop
Pro
,
[
138
]
and
musical
notation
program
like
scorewriter
and
capella
.
GNU
Debugger
us
Python
a
a
pretty
printer
to
show
complex
structure
such
a
C++
container
.
Esri
promotes
Python
a
the
best
choice
for
writing
script
in
ArcGIS
.
[
139
]
It
ha
also
been
used
in
several
video
game
,
[
140
]
[
141
]
and
ha
been
adopted
a
first
of
the
three
available
programming
language
in
Google
App
Engine
,
the
other
two
being
Java
and
Go
.
[
142
]
Python
is
also
used
in
algorithmic
trading
and
quantitative
finance
.
[
143
]
Python
can
also
be
implemented
in
APIs
of
online
brokerage
that
run
on
other
language
by
using
wrapper
.
[
144
]
Python
ha
been
used
in
artificial
intelligence
project
.
[
145
]
[
146
]
[
147
]
[
148
]
As
a
scripting
language
with
modular
architecture
,
simple
syntax
and
rich
text
processing
tool
,
Python
is
often
used
for
natural
language
processing
.
[
149
]
Many
operating
system
include
Python
a
a
standard
component
.
It
ship
with
most
Linux
distribution
,
AmigaOS
4
,
FreeBSD
,
NetBSD
,
OpenBSD
and
macOS
,
and
can
be
used
from
the
command
line
(
terminal
)
.
Many
Linux
distribution
use
installers
written
in
Python
:
Ubuntu
us
the
Ubiquity
installer
,
while
Red
Hat
Linux
and
Fedora
use
the
Anaconda
installer
.
Gentoo
Linux
us
Python
in
it
package
management
system
,
Portage
.
Python
is
used
extensively
in
the
information
security
industry
,
including
in
exploit
development
.
[
150
]
[
151
]
Most
of
the
Sugar
software
for
the
One
Laptop
per
Child
XO
,
now
developed
at
Sugar
Labs
,
is
written
in
Python
.
[
152
]
The
Raspberry
Pi
single-board
computer
project
ha
adopted
Python
a
it
main
user-programming
language
.
LibreOffice
includes
Python
,
and
intends
to
replace
Java
with
Python
.
Its
Python
Scripting
Provider
is
a
core
feature
[
153
]
since
Version
4.0
from
7
February
2013
.
Languages
influenced
by
Python
Python
's
design
and
philosophy
have
influenced
many
other
programming
language
:
Boo
us
indentation
,
a
similar
syntax
,
and
a
similar
object
model
.
[
154
]
Cobra
us
indentation
and
a
similar
syntax
,
and
it
``
Acknowledgements
''
document
list
Python
first
among
language
that
influenced
it
.
[
155
]
However
,
Cobra
directly
support
design-by-contract
,
unit
test
,
and
optional
static
typing
.
[
156
]
CoffeeScript
,
a
programming
language
that
cross-compiles
to
JavaScript
,
ha
Python-inspired
syntax
.
ECMAScript
borrowed
iterators
and
generator
from
Python
.
[
157
]
Go
is
designed
for
the
``
speed
of
working
in
a
dynamic
language
like
Python
''
[
158
]
and
share
the
same
syntax
for
slicing
array
.
Groovy
wa
motivated
by
the
desire
to
bring
the
Python
design
philosophy
to
Java
.
[
159
]
Julia
wa
designed
``
with
true
macro
[
..
and
to
be
]
a
usable
for
general
programming
a
Python
[
and
]
should
be
a
fast
a
C
''
.
[
23
]
Calling
to
or
from
Julia
is
possible
;
to
with
PyCall.jl
and
a
Python
package
pyjulia
allows
calling
,
in
the
other
direction
,
from
Python
.
Kotlin
is
a
functional
programming
language
with
an
interactive
shell
similar
to
Python
.
However
,
Kotlin
is
strongly
typed
with
access
to
standard
Java
library
.
[
160
]
Ruby
's
creator
,
Yukihiro
Matsumoto
,
ha
said
:
``
I
wanted
a
scripting
language
that
wa
more
powerful
than
Perl
,
and
more
object-oriented
than
Python
.
That
's
why
I
decided
to
design
my
own
language
.
``
[
161
]
Swift
,
a
programming
language
developed
by
Apple
,
ha
some
Python-inspired
syntax
.
[
162
]
GDScript
,
dynamically
typed
programming
language
used
to
create
video-games
.
It
is
extremely
similar
to
Python
with
a
few
minor
difference
.
Python
's
development
practice
have
also
been
emulated
by
other
language
.
For
example
,
the
practice
of
requiring
a
document
describing
the
rationale
for
,
and
issue
surrounding
,
a
change
to
the
language
(
in
Python
,
a
PEP
)
is
also
used
in
Tcl
[
163
]
and
Erlang
.
[
164
]
Python
received
TIOBE
's
Programming
Language
of
the
Year
award
in
2007
and
2010
.
The
award
is
given
to
the
language
with
the
greatest
growth
in
popularity
over
the
year
,
a
measured
by
the
TIOBE
index
.
[
165
]
See
also
Free
software
portal
Python
programming
portal
History
of
Python
Comparison
of
integrated
development
environment
for
Python
Comparison
of
programming
language
List
of
programming
language
pip
(
package
manager
)
Off-side
rule
References
^
a
b
Guttag
,
John
V.
(
2016-08-12
)
.
Introduction
to
Computation
and
Programming
Using
Python
:
With
Application
to
Understanding
Data
.
MIT
Press
.
ISBN
978-0-262-52962-4..mw-parser-output
cite.citation
{
font-style
:
inherit
}
.mw-parser-output
q
{
quote
:
''
\
''
''
''
\
''
''
''
'
''
''
'
''
}
.mw-parser-output
code.cs1-code
{
color
:
inherit
;
background
:
inherit
;
border
:
inherit
;
padding
:
inherit
}
.mw-parser-output
.cs1-lock-free
a
{
background
:
url
(
``
//upload.wikimedia.org/wikipedia/commons/thumb/6/65/Lock-green.svg/9px-Lock-green.svg.png
''
)
no-repeat
;
background-position
:
right
.1em
center
}
.mw-parser-output
.cs1-lock-limited
a
,
.mw-parser-output
.cs1-lock-registration
a
{
background
:
url
(
``
//upload.wikimedia.org/wikipedia/commons/thumb/d/d6/Lock-gray-alt-2.svg/9px-Lock-gray-alt-2.svg.png
''
)
no-repeat
;
background-position
:
right
.1em
center
}
.mw-parser-output
.cs1-lock-subscription
a
{
background
:
url
(
``
//upload.wikimedia.org/wikipedia/commons/thumb/a/aa/Lock-red-alt-2.svg/9px-Lock-red-alt-2.svg.png
''
)
no-repeat
;
background-position
:
right
.1em
center
}
.mw-parser-output
.cs1-subscription
,
.mw-parser-output
.cs1-registration
{
color
:
#
555
}
.mw-parser-output
.cs1-subscription
span
,
.mw-parser-output
.cs1-registration
span
{
border-bottom:1px
dotted
;
cursor
:
help
}
.mw-parser-output
.cs1-hidden-error
{
display
:
none
;
font-size:100
%
}
.mw-parser-output
.cs1-visible-error
{
font-size:100
%
}
.mw-parser-output
.cs1-subscription
,
.mw-parser-output
.cs1-registration
,
.mw-parser-output
.cs1-format
{
font-size:95
%
}
.mw-parser-output
.cs1-kern-left
,
.mw-parser-output
.cs1-kern-wl-left
{
padding-left:0.2em
}
.mw-parser-output
.cs1-kern-right
,
.mw-parser-output
.cs1-kern-wl-right
{
padding-right:0.2em
}
^
Deily
,
Ned
(
28
March
2018
)
.
``
Python
3.7.0
is
now
available
''
.
Python
Insider
.
The
Python
Core
Developers
.
Retrieved
29
March
2018
.
^
Peterson
,
Benjamin
(
1
May
2018
)
.
``
Python
2.7.15
released
''
.
Python
Insider
.
The
Python
Core
Developers
.
Retrieved
1
May
2018
.
^
``
PEP
483
--
The
Theory
of
Type
Hints
''
.
Python.org
.
^
File
extension
.pyo
wa
removed
in
Python
3.5
.
See
PEP
0488
^
Holth
,
Moore
(
30
March
2014
)
.
``
PEP
0441
--
Improving
Python
ZIP
Application
Support
''
.
Retrieved
12
November
2015
.
^
a
b
``
Why
wa
Python
created
in
the
first
place
?
''
.
General
Python
FAQ
.
Python
Software
Foundation
.
Retrieved
22
March
2007
.
^
Kuchling
,
Andrew
M.
(
22
December
2006
)
.
``
Interview
with
Guido
van
Rossum
(
July
1998
)
''
.
amk.ca
.
Archived
from
the
original
on
1
May
2007
.
Retrieved
12
March
2012
.
^
http
:
//docs.python.org/3/library/itertools.html
^
van
Rossum
,
Guido
(
1993
)
.
``
An
Introduction
to
Python
for
UNIX/C
Programmers
''
.
Proceedings
of
the
NLUUG
najaarsconferentie
(
Dutch
UNIX
user
group
)
.
even
though
the
design
of
C
is
far
from
ideal
,
it
influence
on
Python
is
considerable
.
^
a
b
``
Classes
''
.
The
Python
Tutorial
.
Python
Software
Foundation
.
Retrieved
20
February
2012
.
It
is
a
mixture
of
the
class
mechanism
found
in
C++
and
Modula-3
^
Lundh
,
Fredrik
.
``
Call
By
Object
''
.
effbot.org
.
Retrieved
21
November
2017.
replace
``
CLU
''
with
``
Python
''
,
``
record
''
with
``
instance
''
,
and
``
procedure
''
with
``
function
or
method
''
,
and
you
get
a
pretty
accurate
description
of
Python
's
object
model
.
^
Simionato
,
Michele
.
``
The
Python
2.3
Method
Resolution
Order
''
.
Python
Software
Foundation
.
The
C3
method
itself
ha
nothing
to
do
with
Python
,
since
it
wa
invented
by
people
working
on
Dylan
and
it
is
described
in
a
paper
intended
for
lisper
^
Kuchling
,
A.
M.
``
Functional
Programming
HOWTO
''
.
Python
v2.7.2
documentation
.
Python
Software
Foundation
.
Retrieved
9
February
2012
.
^
Schemenauer
,
Neil
;
Peters
,
Tim
;
Hetland
,
Magnus
Lie
(
18
May
2001
)
.
``
PEP
255
–
Simple
Generators
''
.
Python
Enhancement
Proposals
.
Python
Software
Foundation
.
Retrieved
9
February
2012
.
^
Smith
,
Kevin
D.
;
Jewett
,
Jim
J.
;
Montanaro
,
Skip
;
Baxter
,
Anthony
(
2
September
2004
)
.
``
PEP
318
–
Decorators
for
Functions
and
Methods
''
.
Python
Enhancement
Proposals
.
Python
Software
Foundation
.
Retrieved
24
February
2012
.
^
``
More
Control
Flow
Tools
''
.
Python
3
documentation
.
Python
Software
Foundation
.
Retrieved
24
July
2015
.
^
http
:
//docs.python.org/3/library/itertools.html
^
``
CoffeeScript
borrows
chained
comparison
from
Python
''
.
^
``
Genie
Language
-
A
brief
guide
''
.
Retrieved
28
December
2015
.
^
``
Perl
and
Python
influence
in
JavaScript
''
.
www.2ality.com
.
24
February
2013
.
Retrieved
15
May
2015
.
^
Rauschmayer
,
Axel
.
``
Chapter
3
:
The
Nature
of
JavaScript
;
Influences
''
.
O'Reilly
,
Speaking
JavaScript
.
Retrieved
15
May
2015
.
^
a
b
``
Why
We
Created
Julia
''
.
Julia
website
.
February
2012
.
Retrieved
5
June
2014
.
^
Ring
Team
(
4
December
2017
)
.
``
Ring
and
other
language
''
.
ring-lang.net
.
ring-lang
.
^
Bini
,
Ola
(
2007
)
.
Practical
JRuby
on
Rails
Web
2.0
Projects
:
bringing
Ruby
on
Rails
to
the
Java
platform
.
Berkeley
:
APress
.
p.
3
.
ISBN
978-1-59059-881-8
.
^
Lattner
,
Chris
(
3
June
2014
)
.
``
Chris
Lattner
's
Homepage
''
.
Chris
Lattner
.
Retrieved
3
June
2014
.
The
Swift
language
is
the
product
of
tireless
effort
from
a
team
of
language
expert
,
documentation
guru
,
compiler
optimization
ninja
,
and
an
incredibly
important
internal
dogfooding
group
who
provided
feedback
to
help
refine
and
battle-test
idea
.
Of
course
,
it
also
greatly
benefited
from
the
experience
hard-won
by
many
other
language
in
the
field
,
drawing
idea
from
Objective-C
,
Rust
,
Haskell
,
Ruby
,
Python
,
C
#
,
CLU
,
and
far
too
many
others
to
list
.
^
Kuhlman
,
Dave
.
``
A
Python
Book
:
Beginning
Python
,
Advanced
Python
,
and
Python
Exercises
''
.
Archived
from
the
original
on
23
June
2012
.
^
``
Guido
van
Rossum
Stepping
Down
from
Role
a
Python
's
Benevolent
Dictator
For
Life
|
Linux
Journal
''
.
www.linuxjournal.com
.
^
``
Python
bos
Guido
van
Rossum
step
down
after
30
year
|
TheINQUIRER
''
.
http
:
//www.theinquirer.net
.
External
link
in
|website=
(
help
)
^
``
About
Python
''
.
Python
Software
Foundation
.
Retrieved
24
April
2012.
,
second
section
``
Fans
of
Python
use
the
phrase
``
battery
included
''
to
describe
the
standard
library
,
which
cover
everything
from
asynchronous
processing
to
zip
file
.
''
^
``
History
and
License
''
.
Retrieved
5
December
2016
.
``
All
Python
release
are
Open
Source
''
^
a
b
Venners
,
Bill
(
13
January
2003
)
.
``
The
Making
of
Python
''
.
Artima
Developer
.
Artima
.
Retrieved
22
March
2007
.
^
van
Rossum
,
Guido
(
20
January
2009
)
.
``
A
Brief
Timeline
of
Python
''
.
The
History
of
Python
.
Google
.
Retrieved
20
January
2009
.
^
van
Rossum
,
Guido
(
29
August
2000
)
.
``
SETL
(
wa
:
Lukewarm
about
range
literal
)
''
.
Python-Dev
(
Mailing
list
)
.
Retrieved
13
March
2011
.
^
Fairchild
,
Carlie
(
12
July
2018
)
.
``
Guido
van
Rossum
Stepping
Down
from
Role
a
Python
's
Benevolent
Dictator
For
Life
''
.
Linux
Journal
.
Retrieved
13
July
2018
.
^
van
Rossum
,
Guido
(
1996
)
.
``
Foreword
for
``
Programming
Python
''
(
1st
ed.
)
''
.
Retrieved
10
July
2014
.
^
Kuchling
,
A.
M.
;
Zadka
,
Moshe
(
16
October
2000
)
.
``
What
's
New
in
Python
2.0
''
.
Python
Software
Foundation
.
Retrieved
11
February
2012
.
^
``
Python
3.0
Release
''
.
Python
Software
Foundation
.
Retrieved
8
July
2009
.
^
van
Rossum
,
Guido
(
5
April
2006
)
.
``
PEP
3000
–
Python
3000
''
.
Python
Enhancement
Proposals
.
Python
Software
Foundation
.
Retrieved
27
June
2009
.
^
``
Automated
Python
2
to
3
code
translation
—
Python
Documentation
''
.
Retrieved
11
February
2018
.
^
``
PEP
373
--
Python
2.7
Release
Schedule
''
.
python.org
.
Retrieved
9
January
2017
.
^
``
PEP
466
--
Network
Security
Enhancements
for
Python
2.7.x
''
.
python.org
.
Retrieved
9
January
2017
.
^
``
Google
Open
Source
Blog
:
Grumpy
:
Go
running
Python
!
''
.
4
January
2017
.
Retrieved
7
March
2017
.
^
The
Cain
Gang
Ltd.
``
Python
Metaclasses
:
Who
?
Why
?
When
?
''
(
PDF
)
.
Archived
from
the
original
(
PDF
)
on
10
December
2009
.
Retrieved
27
June
2009
.
^
``
3.3
.
Special
method
name
''
.
The
Python
Language
Reference
.
Python
Software
Foundation
.
Retrieved
27
June
2009
.
^
``
PyDBC
:
method
precondition
,
method
postconditions
and
class
invariant
for
Python
''
.
Retrieved
24
September
2011
.
^
``
Contracts
for
Python
''
.
Retrieved
24
September
2011
.
^
``
PyDatalog
''
.
Retrieved
22
July
2012
.
^
a
b
Hettinger
,
Raymond
(
30
January
2002
)
.
``
PEP
289
–
Generator
Expressions
''
.
Python
Enhancement
Proposals
.
Python
Software
Foundation
.
Retrieved
19
February
2012
.
^
``
6.5
itertools
–
Functions
creating
iterators
for
efficient
looping
''
.
Docs.python.org
.
Retrieved
22
November
2016
.
^
a
b
Peters
,
Tim
(
19
August
2004
)
.
``
PEP
20
–
The
Zen
of
Python
''
.
Python
Enhancement
Proposals
.
Python
Software
Foundation
.
Retrieved
24
November
2008
.
^
Martelli
,
Alex
;
Ravenscroft
,
Anna
;
Ascher
,
David
(
2005
)
.
Python
Cookbook
,
2nd
Edition
.
O'Reilly
Media
.
p.
230
.
ISBN
978-0-596-00797-3
.
^
``
Python
Culture
''
.
^
``
General
Python
FAQ
''
.
Python
v2.7.3
documentation
.
Docs.python.org
.
Retrieved
3
December
2012
.
^
``
15
Ways
Python
Is
a
Powerful
Force
on
the
Web
''
.
^
``
pprint
-
Data
pretty
printer
-
Python
Documentation
''
.
^
Goodger
,
David
.
``
Code
Like
a
Pythonista
:
Idiomatic
Python
''
.
^
``
How
to
think
like
a
Pythonista
''
.
^
``
Is
Python
a
good
language
for
beginning
programmer
?
''
.
General
Python
FAQ
.
Python
Software
Foundation
.
Retrieved
21
March
2007
.
^
``
Myths
about
indentation
in
Python
''
.
Secnetix.de
.
Retrieved
19
April
2011
.
^
``
Python
2.5
Release
''
.
Python.org
.
^
``
Highlights
:
Python
2.5
''
.
Python.org
.
^
Sweigart
,
Al
(
2010
)
.
``
Appendix
A
:
Differences
Between
Python
2
and
3
''
.
Invent
Your
Own
Computer
Games
with
Python
(
2
ed.
)
.
ISBN
978-0-9821060-1-3
.
Retrieved
20
February
2014
.
^
van
Rossum
,
Guido
(
22
April
2009
)
.
``
Tail
Recursion
Elimination
''
.
Neopythonic.blogspot.be
.
Retrieved
3
December
2012
.
^
van
Rossum
,
Guido
(
9
February
2006
)
.
``
Language
Design
Is
Not
Just
Solving
Puzzles
''
.
Artima
forum
.
Artima
.
Retrieved
21
March
2007
.
^
van
Rossum
,
Guido
;
Eby
,
Phillip
J
.
(
10
May
2005
)
.
``
PEP
342
–
Coroutines
via
Enhanced
Generators
''
.
Python
Enhancement
Proposals
.
Python
Software
Foundation
.
Retrieved
19
February
2012
.
^
``
PEP
380
''
.
Python.org
.
Retrieved
3
December
2012
.
^
``
division
''
.
python.org
.
^
``
PEP
0465
--
A
dedicated
infix
operator
for
matrix
multiplication
''
.
python.org
.
Retrieved
1
January
2016
.
^
``
Python
3.5.1
Release
and
Changelog
''
.
python.org
.
Retrieved
1
January
2016
.
^
``
Chapter
15
.
Expressions
-
15.21.1
.
Numerical
Equality
Operators
==
and
!
=
''
.
Oracle
Corporation
.
Retrieved
28
August
2016
.
^
``
Chapter
15
.
Expressions
-
15.21.3
.
Reference
Equality
Operators
==
and
!
=
''
.
Oracle
Corporation
.
Retrieved
28
August
2016
.
^
van
Rossum
,
Guido
;
Hettinger
,
Raymond
(
7
February
2003
)
.
``
PEP
308
–
Conditional
Expressions
''
.
Python
Enhancement
Proposals
.
Python
Software
Foundation
.
Retrieved
13
July
2011
.
^
``
4
.
Built-in
Types
—
Python
3.6.3rc1
documentation
''
.
python.org
.
Retrieved
1
October
2017
.
^
a
b
``
PEP
498
--
Literal
String
Interpolation
''
.
python.org
.
Retrieved
8
March
2017
.
^
``
Why
must
'self
'
be
used
explicitly
in
method
definition
and
call
?
''
.
Design
and
History
FAQ
.
Python
Software
Foundation
.
Retrieved
19
February
2012
.
^
``
The
Python
Language
Reference
,
section
3.3
.
New-style
and
classic
class
,
for
release
2.7.1
''
.
Retrieved
12
January
2011
.
^
``
Type
hinting
for
Python
''
.
LWN.net
.
24
December
2014
.
Retrieved
5
May
2015
.
^
``
mypy
-
Optional
Static
Typing
for
Python
''
.
Retrieved
28
January
2017
.
^
Zadka
,
Moshe
;
van
Rossum
,
Guido
(
11
March
2001
)
.
``
PEP
237
–
Unifying
Long
Integers
and
Integers
''
.
Python
Enhancement
Proposals
.
Python
Software
Foundation
.
Retrieved
24
September
2011
.
^
``
PEP
465
--
A
dedicated
infix
operator
for
matrix
multiplication
''
.
python.org
.
^
``
The
tilde
operator
in
Python
-
Stackoverflow
''
.
stackoverflow.com
.
^
``
BitwiseOperators
-
Python
Wiki
''
.
wiki.python.org
.
^
Zadka
,
Moshe
;
van
Rossum
,
Guido
(
11
March
2001
)
.
``
PEP
238
–
Changing
the
Division
Operator
''
.
Python
Enhancement
Proposals
.
Python
Software
Foundation
.
Retrieved
23
October
2013
.
^
``
Why
Python
's
Integer
Division
Floors
''
.
Retrieved
25
August
2010
.
^
``
round
''
,
The
Python
standard
library
,
release
2.7
,
§2
:
Built-in
function
,
retrieved
14
August
2011
^
``
round
''
,
The
Python
standard
library
,
release
3.2
,
§2
:
Built-in
function
,
retrieved
14
August
2011
^
Beazley
,
David
M.
(
2009
)
.
Python
Essential
Reference
(
4th
ed.
)
.
p.
66
.
^
Kernighan
,
Brian
W.
;
Ritchie
,
Dennis
M.
(
1988
)
.
The
C
Programming
Language
(
2nd
ed.
)
.
p.
206
.
^
``
Built-in
Type
''
.
docs.python.org
.
^
Batista
,
Facundo
.
``
PEP
0327
--
Decimal
Data
Type
''
.
Python.org
.
Retrieved
26
September
2015
.
^
``
What
's
New
in
Python
2.6
—
Python
v2.6.9
documentation
''
.
docs.python.org
.
Retrieved
26
September
2015
.
^
Piotrowski
,
Przemyslaw
(
July
2006
)
.
``
Build
a
Rapid
Web
Development
Environment
for
Python
Server
Pages
and
Oracle
''
.
Oracle
Technology
Network
.
Oracle
.
Retrieved
12
March
2012
.
^
Batista
,
Facundo
(
17
October
2003
)
.
``
PEP
327
–
Decimal
Data
Type
''
.
Python
Enhancement
Proposals
.
Python
Software
Foundation
.
Retrieved
24
November
2008
.
^
Eby
,
Phillip
J
.
(
7
December
2003
)
.
``
PEP
333
–
Python
Web
Server
Gateway
Interface
v1.0
''
.
Python
Enhancement
Proposals
.
Python
Software
Foundation
.
Retrieved
19
February
2012
.
^
Debill
,
Erik
.
``
Module
Counts
''
.
ModuleCounts
.
Retrieved
20
September
2017
.
^
``
20+
Python
Web
Scraping
Examples
(
Beautiful
Soup
&
Selenium
)
-
Like
Geeks
''
.
likegeeks.com
.
5
December
2017
.
Retrieved
12
March
2018
.
^
Stack
Overflow
,
“
What
's
the
difference
between
an
Python
module
and
a
Python
package
?
”
^
Python
3.7.0
documentation
,
Wikidata
Q56718217
“
Package
”
in
the
Glossary
^
Enthought
,
Canopy
.
``
Canopy
''
.
www.enthought.com
.
Retrieved
20
August
2016
.
^
van
Rossum
,
Guido
(
5
June
2001
)
.
``
PEP
7
–
Style
Guide
for
C
Code
''
.
Python
Enhancement
Proposals
.
Python
Software
Foundation
.
Retrieved
24
November
2008
.
^
``
CPython
byte
code
''
.
Docs.python.org
.
Retrieved
16
February
2016
.
^
``
Python
2.5
internals
''
(
PDF
)
.
Retrieved
19
April
2011
.
^
``
An
Interview
with
Guido
van
Rossum
''
.
Oreilly.com
.
Retrieved
24
November
2008
.
^
``
PyPy
compatibility
''
.
Pypy.org
.
Retrieved
3
December
2012
.
^
``
speed
comparison
between
CPython
and
Pypy
''
.
Speed.pypy.org
.
Retrieved
3
December
2012
.
^
``
Application-level
Stackless
feature
—
PyPy
2.0.2
documentation
''
.
Doc.pypy.org
.
Retrieved
17
July
2013
.
^
``
Plans
for
optimizing
Python
''
.
Google
Project
Hosting
.
Google
.
15
December
2009
.
Retrieved
24
September
2011
.
^
``
Python
on
the
Nokia
N900
''
.
Stochastic
Geometry
.
^
``
Nuitka
Home
|
Nuitka
Home
''
.
nuitka.net
.
Retrieved
18
August
2017
.
^
Murri
,
Riccardo
(
2013
)
.
Performance
of
Python
runtimes
on
a
non-numeric
scientific
code
.
European
Conference
on
Python
in
Science
(
EuroSciPy
)
.
arXiv:1404.6388
.
Bibcode:2014arXiv1404.6388M
.
^
a
b
Warsaw
,
Barry
;
Hylton
,
Jeremy
;
Goodger
,
David
(
13
June
2000
)
.
``
PEP
1
–
PEP
Purpose
and
Guidelines
''
.
Python
Enhancement
Proposals
.
Python
Software
Foundation
.
Retrieved
19
April
2011
.
^
Cannon
,
Brett
.
``
Guido
,
Some
Guys
,
and
a
Mailing
List
:
How
Python
is
Developed
''
.
python.org
.
Python
Software
Foundation
.
Archived
from
the
original
on
1
June
2009
.
Retrieved
27
June
2009
.
^
``
Python
Developer
's
Guide
''
.
^
Norwitz
,
Neal
(
8
April
2002
)
.
``
[
Python-Dev
]
Release
Schedules
(
wa
Stability
&
change
)
''
.
Retrieved
27
June
2009
.
^
Aahz
;
Baxter
,
Anthony
(
15
March
2001
)
.
``
PEP
6
–
Bug
Fix
Releases
''
.
Python
Enhancement
Proposals
.
Python
Software
Foundation
.
Retrieved
27
June
2009
.
^
``
Python
Buildbot
''
.
Python
Developer
’
s
Guide
.
Python
Software
Foundation
.
Retrieved
24
September
2011
.
^
DeBill
,
Erik
.
``
Module
Counts
''
.
www.modulecounts.com
.
Retrieved
20
August
2016
.
^
a
b
``
Whetting
Your
Appetite
''
.
The
Python
Tutorial
.
Python
Software
Foundation
.
Retrieved
20
February
2012
.
^
``
In
Python
,
should
I
use
else
after
a
return
in
an
if
block
?
''
.
Stack
Overflow
.
Stack
Exchange
.
17
February
2011
.
Retrieved
6
May
2011
.
^
Lutz
,
Mark
(
2009
)
.
Learning
Python
:
Powerful
Object-Oriented
Programming
.
O'Reilly
Media
,
Inc.
p.
17
.
ISBN
9781449379322
.
^
Fehily
,
Chris
(
2002
)
.
Python
.
Peachpit
Press
.
p.
xv
.
ISBN
9780201748840
.
^
``
TIOBE
Index
''
.
TIOBE
-
The
Software
Quality
Company
.
Retrieved
7
March
2017
.
^
TIOBE
Software
Index
(
2015
)
.
``
TIOBE
Programming
Community
Index
Python
''
.
Retrieved
10
September
2015
.
^
Prechelt
,
Lutz
(
14
March
2000
)
.
``
An
empirical
comparison
of
C
,
C++
,
Java
,
Perl
,
Python
,
Rexx
,
and
Tcl
''
(
PDF
)
.
Retrieved
30
August
2013
.
^
``
Quotes
about
Python
''
.
Python
Software
Foundation
.
Retrieved
8
January
2012
.
^
``
Organizations
Using
Python
''
.
Python
Software
Foundation
.
Retrieved
15
January
2009
.
^
``
Python
:
the
holy
grail
of
programming
''
.
CERN
Bulletin
.
CERN
Publications
(
31/2006
)
.
31
July
2006
.
Retrieved
11
February
2012
.
^
Shafer
,
Daniel
G.
(
17
January
2003
)
.
``
Python
Streamlines
Space
Shuttle
Mission
Design
''
.
Python
Software
Foundation
.
Retrieved
24
November
2008
.
^
``
Tornado
:
Facebook
's
Real-Time
Web
Framework
for
Python
-
Facebook
for
Developers
''
.
Facebook
for
Developers
.
Retrieved
2018-06-19
.
^
``
How
we
use
Python
at
Spotify
''
.
Spotify
Labs
.
Retrieved
2018-07-25
.
^
Fortenberry
,
Tim
(
17
January
2003
)
.
``
Industrial
Light
&
Magic
Runs
on
Python
''
.
Python
Software
Foundation
.
Retrieved
11
February
2012
.
^
Taft
,
Darryl
K.
(
5
March
2007
)
.
``
Python
Slithers
into
Systems
''
.
eWeek.com
.
Ziff
Davis
Holdings
.
Retrieved
24
September
2011
.
^
``
Usage
statistic
and
market
share
of
Python
for
website
''
.
2012
.
Retrieved
18
December
2012
.
^
Oliphant
,
Travis
(
2007
)
.
``
Python
for
Scientific
Computing
''
.
Computing
in
Science
and
Engineering
.
^
Millman
,
K.
Jarrod
;
Aivazis
,
Michael
(
2011
)
.
``
Python
for
Scientists
and
Engineers
''
.
Computing
in
Science
and
Engineering
.
13
(
2
)
:
9–12
.
^
``
Installers
for
GIMP
for
Windows
-
Frequently
Asked
Questions
''
.
26
July
2013
.
Archived
from
the
original
on
17
July
2013
.
Retrieved
26
July
2013
.
^
``
jasc
psp9components
''
.
Archived
from
the
original
on
19
March
2008
.
^
``
About
getting
started
with
writing
geoprocessing
script
''
.
ArcGIS
Desktop
Help
9.2
.
Environmental
Systems
Research
Institute
.
17
November
2006
.
Retrieved
11
February
2012
.
^
CCP
porkbelly
(
24
August
2010
)
.
``
Stackless
Python
2.7
''
.
EVE
Community
Dev
Blogs
.
CCP
Games
.
As
you
may
know
,
EVE
ha
at
it
core
the
programming
language
known
a
Stackless
Python
.
^
Caudill
,
Barry
(
20
September
2005
)
.
``
Modding
Sid
Meier
's
Civilization
IV
''
.
Sid
Meier
's
Civilization
IV
Developer
Blog
.
Firaxis
Games
.
Archived
from
the
original
on
11
August
2010.
we
created
three
level
of
tool
...
The
next
level
offer
Python
and
XML
support
,
letting
modders
with
more
experience
manipulate
the
game
world
and
everything
in
it
.
^
``
Python
Language
Guide
(
v1.0
)
''
.
Google
Documents
List
Data
API
v1.0
.
Google
.
Archived
from
the
original
on
11
August
2010
.
^
``
Python
-
Best
Programming
Language
for
Algorithmic
Trading
Systems
''
.
9
March
2016
.
Retrieved
3
October
2016
.
^
``
Trading
with
Interactive
Brokers
using
Python
:
An
IBPy
Tutorial
''
.
19
September
2016
.
Retrieved
3
October
2016
.
^
``
Python
for
Artificial
Intelligence
''
.
Wiki.python.org
.
19
July
2012
.
Archived
from
the
original
on
1
November
2012
.
Retrieved
3
December
2012
.
^
Paine
,
Jocelyn
,
ed
.
(
August
2005
)
.
``
AI
in
Python
''
.
AI
Expert
Newsletter
.
Amzi
!
.
Retrieved
11
February
2012
.
^
``
PyAIML
0.8.5
:
Python
Package
Index
''
.
Pypi.python.org
.
Retrieved
17
July
2013
.
^
Russell
,
Stuart
J
.
&
Norvig
,
Peter
(
2009
)
.
Artificial
Intelligence
:
A
Modern
Approach
(
3rd
ed.
)
.
Upper
Saddle
River
,
NJ
:
Prentice
Hall
.
p.
1062
.
ISBN
978-0-13-604259-4
.
Retrieved
11
February
2012
.
^
``
Natural
Language
Toolkit
''
.
^
``
Immunity
:
Knowing
You
're
Secure
''
.
Archived
from
the
original
on
16
February
2009
.
^
``
Corelabs
site
''
.
^
``
What
is
Sugar
?
''
.
Sugar
Labs
.
Retrieved
11
February
2012
.
^
``
4.0
New
Features
and
Fixes
''
.
LibreOffice.org
.
The
Document
Foundation
.
2013
.
Retrieved
25
February
2013
.
^
``
Gotchas
for
Python
Users
''
.
boo.codehaus.org
.
Codehaus
Foundation
.
Archived
from
the
original
on
11
December
2008
.
Retrieved
24
November
2008
.
^
Esterbrook
,
Charles
.
``
Acknowledgements
''
.
cobra-language.com
.
Cobra
Language
.
Retrieved
7
April
2010
.
^
Esterbrook
,
Charles
.
``
Comparison
to
Python
''
.
cobra-language.com
.
Cobra
Language
.
Retrieved
7
April
2010
.
^
``
Proposals
:
iterators
and
generator
[
ES4
Wiki
]
''
.
wiki.ecmascript.org
.
Archived
from
the
original
on
20
October
2007
.
Retrieved
24
November
2008
.
^
Kincaid
,
Jason
(
10
November
2009
)
.
``
Google
's
Go
:
A
New
Programming
Language
That
's
Python
Meets
C++
''
.
TechCrunch
.
Retrieved
29
January
2010
.
^
Strachan
,
James
(
29
August
2003
)
.
``
Groovy
–
the
birth
of
a
new
dynamic
language
for
the
Java
platform
''
.
^
``
Working
with
the
Command
Line
Compiler
-
Kotlin
Programming
Language
''
.
Kotlin
.
Retrieved
12
March
2018
.
^
``
An
Interview
with
the
Creator
of
Ruby
''
.
Linuxdevcenter.com
.
Retrieved
3
December
2012
.
^
Lattner
,
Chris
(
3
June
2014
)
.
``
Chris
Lattner
's
Homepage
''
.
Chris
Lattner
.
Retrieved
3
June
2014
.
I
started
work
on
the
Swift
Programming
Language
in
July
of
2010
.
I
implemented
much
of
the
basic
language
structure
,
with
only
a
few
people
knowing
of
it
existence
.
A
few
other
(
amazing
)
people
started
contributing
in
earnest
late
in
2011
,
and
it
became
a
major
focus
for
the
Apple
Developer
Tools
group
in
July
2013
[
...
]
drawing
idea
from
Objective-C
,
Rust
,
Haskell
,
Ruby
,
Python
,
C
#
,
CLU
,
and
far
too
many
others
to
list
.
^
Kupries
,
Andreas
;
Fellows
,
Donal
K.
(
14
September
2000
)
.
``
TIP
#
3
:
TIP
Format
''
.
tcl.tk
.
Tcl
Developer
Xchange
.
Retrieved
24
November
2008
.
^
Gustafsson
,
Per
;
Niskanen
,
Raimo
(
29
January
2007
)
.
``
EEP
1
:
EEP
Purpose
and
Guidelines
''
.
erlang.org
.
Retrieved
19
April
2011
.
^
``
TIOBE
Programming
Community
Index
for
March
2012
''
.
TIOBE
Software
.
March
2012
.
Retrieved
25
March
2012
.
Further
reading
Downey
,
Allen
B
.
(
May
2012
)
.
Think
Python
:
How
to
Think
Like
a
Computer
Scientist
(
Version
1.6.6
ed.
)
.
ISBN
978-0-521-72596-5
.
Hamilton
,
Naomi
(
5
August
2008
)
.
``
The
A-Z
of
Programming
Languages
:
Python
''
.
Computerworld
.
Archived
from
the
original
on
29
December
2008
.
Retrieved
31
March
2010
.
Lutz
,
Mark
(
2013
)
.
Learning
Python
(
5th
ed.
)
.
O'Reilly
Media
.
ISBN
978-0-596-15806-4
.
Pilgrim
,
Mark
(
2004
)
.
Dive
Into
Python
.
Apress
.
ISBN
978-1-59059-356-1
.
Pilgrim
,
Mark
(
2009
)
.
Dive
Into
Python
3
.
Apress
.
ISBN
978-1-4302-2415-0
.
Archived
from
the
original
on
2011-10-17
.
Summerfield
,
Mark
(
2009
)
.
Programming
in
Python
3
(
2nd
ed.
)
.
Addison-Wesley
Professional
.
ISBN
978-0-321-68056-3
.
External
link
Find
more
aboutPython
(
programming
language
)
at
Wikipedia
's
sister
project
Media
from
Wikimedia
Commons
Quotations
from
Wikiquote
Textbooks
from
Wikibooks
Learning
resource
from
Wikiversity
Official
website
Python
at
Curlie
(
based
on
DMOZ
)
vteProgramming
language
Comparison
Timeline
History
APL
Assembly
BASIC
C
C++
C
#
COBOL
Fortran
Go
Groovy
Haskell
Java
JavaScript
(
JS
)
Kotlin
Lisp
Lua
Objective-C
Pascal
Perl
PHP
Python
Ruby
Rust
Shell
Smalltalk
Swift
Visual
Basic
.NET
(
VB.NET
)
more
...
Category
Lists
Alphabetical
Categorical
Generational
Non-English-based
vtePythonImplementations
CircuitPython
CLPython
CPython
Cython
MicroPython
Numba
IronPython
Jython
Psyco
PyPy
Python
for
S60
Shed
Skin
Stackless
Python
Unladen
Swallow
more
...
IDE
Boa
Eric
Python
IDE
IDLE
PyCharm
PyDev
SPE
Ninja-IDE
more
...
Topics
WSGI
software
(
list
)
Python
Software
Foundation
PyCon
vtePython
web
framework
BlueBream
Bottle
CherryPy
Django
Flask
Grok
Nagare
Nevow
Pyjs
Pylons
Pyramid
Quixote
Spyce
TACTIC
Tornado
TurboGears
TwistedWeb
Webware
web2py
Zope
2
more
...
vteFree
and
open-source
softwareGeneral
Alternative
term
for
free
software
Comparison
of
open-source
and
closed-source
software
Comparison
of
source
code
hosting
facility
Free
software
Free
software
project
directory
Gratis
versus
libre
Long-term
support
Open-source
software
Open-source
software
development
Outline
Softwarepackages
Audio
Bioinformatics
Codecs
Collaboration
Configuration
management
Device
driver
Graphics
Wireless
Geophysics
Health
Mathematics
Operating
system
Programming
language
Routing
Statistics
Television
Video
game
Web
application
Content
management
system
E-commerce
Word
processor
Android
apps
iOS
apps
Commercial
Trademarked
Formerly
proprietary
Community
Free
software
movement
History
Open-source
software
movement
Organizations
Events
Licenses
AFL
Apache
APSL
Artistic
Beerware
Boost
BSD
CC0
CDDL
EPL
Free
Software
Foundation
GNU
GPL
GNU
LGPL
ISC
MIT
MPL
Ms-PL/RL
Python
Python
Software
Foundation
License
Sleepycat
Unlicense
WTFPL
zlib
Types
and
standard
Comparison
of
free
and
open-source
software
license
Contributor
License
Agreement
Copyleft
Debian
Free
Software
Guidelines
Definition
of
Free
Cultural
Works
Free
license
The
Free
Software
Definition
The
Open
Source
Definition
Open-source
license
Permissive
software
licence
Public
domain
Viral
license
Challenges
Binary
blob
Digital
right
management
Hardware
restriction
License
proliferation
Mozilla
software
rebranding
Proprietary
software
SCO/Linux
controversy
Secure
boot
Software
patent
Software
security
Trusted
Computing
Related
topic
Forking
GNU
Manifesto
Microsoft
Open
Specification
Promise
Open-core
model
Open-source
hardware
Shared
Source
Initiative
Source-available
software
The
Cathedral
and
the
Bazaar
Revolution
OS
Book
Category
Commons
Portal
Authority
control
BNF
:
cb13560465c
(
data
)
GND
:
4434275-5
LCCN
:
sh96008834
SUDOC
:
051626225
Retrieved
from
``
http
:
//en.wikipedia.org/w/index.php
?
title=Python_
(
programming_language
)
&
oldid=861636160
''
Categories
:
Programming
languagesClass-based
programming
languagesComputational
notebookComputer
science
in
the
NetherlandsCross-platform
free
softwareDutch
inventionsDynamically
typed
programming
languagesEducational
programming
languagesHigh-level
programming
languagesInformation
technology
in
the
NetherlandsObject-oriented
programming
languagesProgramming
language
created
in
1991Python
(
programming
language
)
Scripting
languagesText-oriented
programming
languagesCross-platform
softwareHidden
category
:
CS1
error
:
external
linksWikipedia
semi-protected
pagesAll
article
with
unsourced
statementsArticles
with
unsourced
statement
from
October
2017Wikipedia
article
needing
clarification
from
May
2018Articles
with
unsourced
statement
from
May
2018Articles
containing
potentially
dated
statement
from
March
2018All
article
containing
potentially
dated
statementsArticles
containing
potentially
dated
statement
from
August
2016Articles
containing
potentially
dated
statement
from
January
2018Articles
with
Curlie
linksWikipedia
article
with
BNF
identifiersWikipedia
article
with
GND
identifiersWikipedia
article
with
LCCN
identifiersWikipedia
article
with
SUDOC
identifiersGood
articlesUse
dmy
date
from
August
2015
Navigation
menu
Personal
tool
Not
logged
inTalkContributionsCreate
accountLog
in
Namespaces
ArticleTalk
Variants
Views
ReadView
sourceView
history
More
Search
Navigation
Main
pageContentsFeatured
contentCurrent
eventsRandom
articleDonate
to
WikipediaWikipedia
store
Interaction
HelpAbout
WikipediaCommunity
portalRecent
changesContact
page
Tools
What
link
hereRelated
changesUpload
fileSpecial
pagesPermanent
linkPage
informationWikidata
itemCite
this
page
Print/export
Create
a
bookDownload
a
PDFPrintable
version
In
other
project
Wikimedia
CommonsWikibooksWikiquoteWikiversity
Languages
AfrikaansAlemannischالعربيةAragonésঅসমীয়াAsturianuAzərbaycancaتۆرکجهবাংলাBân-lâm-gúБеларускаяБългарскиBosanskiCatalàCebuanoČeštinaDanskDeutschEestiΕλληνικάEspañolEsperantoEuskaraفارسیFrançaisGalegoગુજરાતી한국어Հայերենहिन्दीHrvatskiBahasa
IndonesiaInterlinguaÍslenskaItalianoעבריתქართულიҚазақшаКыргызчаLatinaLatviešuLietuviųLa
.lojban.LumbaartMagyarМакедонскиമലയാളംमराठीBahasa
MelayuМонголမြန်မာဘာသာNederlandsनेपाली日本語NorskNorsk
nynorskଓଡ଼ିଆOʻzbekcha/ўзбекчаپنجابیភាសាខ្មែរPlattdüütschPolskiPortuguêsRomânăРусскийScotsShqipසිංහලSimple
EnglishSlovenčinaSlovenščinaکوردیСрпски
/
srpskiSrpskohrvatski
/
српскохрватскиSuomiSvenskaTagalogதமிழ்తెలుగుไทยТоҷикӣTürkçeᨅᨔ
ᨕᨘᨁᨗУкраїнськаاردوTiếng
Việt吴语粵語中文
Edit
link
This
page
wa
last
edited
on
28
September
2018
,
at
21:33
(
UTC
)
.
Text
is
available
under
the
Creative
Commons
Attribution-ShareAlike
License
;
additional
term
may
apply
.
By
using
this
site
,
you
agree
to
the
Terms
of
Use
and
Privacy
Policy
.
Wikipedia®
is
a
registered
trademark
of
the
Wikimedia
Foundation
,
Inc.
,
a
non-profit
organization
.
Privacy
policy
About
Wikipedia
Disclaimers
Contact
Wikipedia
Developers
Cookie
statement
Mobile
view
(
window.RLQ=window.RLQ||
[
]
)
.push
(
function
(
)
{
mw.config.set
(
{
``
wgPageParseReport
''
:
{
``
limitreport
''
:
{
``
cputime
''
:
''
1.972
''
,
''
walltime
''
:
''
2.191
''
,
''
ppvisitednodes
''
:
{
``
value
''
:10049
,
''
limit
''
:1000000
}
,
''
ppgeneratednodes
''
:
{
``
value
''
:0
,
''
limit
''
:1500000
}
,
''
postexpandincludesize
''
:
{
``
value
''
:327643
,
''
limit
''
:2097152
}
,
''
templateargumentsize
''
:
{
``
value
''
:13988
,
''
limit
''
:2097152
}
,
''
expansiondepth
''
:
{
``
value
''
:21
,
''
limit
''
:40
}
,
''
expensivefunctioncount
''
:
{
``
value
''
:19
,
''
limit
''
:500
}
,
''
unstrip-depth
''
:
{
``
value
''
:1
,
''
limit
''
:20
}
,
''
unstrip-size
''
:
{
``
value
''
:428958
,
''
limit
''
:5000000
}
,
''
entityaccesscount
''
:
{
``
value
''
:4
,
''
limit
''
:400
}
,
''
timingprofile
''
:
[
``
100.00
%
1762.170
1
-total
''
,
''
62.31
%
1098.072
1
Template
:
Reflist
''
,
''
31.78
%
560.033
141
Template
:
Cite_web
''
,
''
9.08
%
160.067
2
Template
:
Infobox
''
,
''
8.33
%
146.752
1
Template
:
Infobox_programming_language
''
,
''
7.63
%
134.535
14
Template
:
Cite_book
''
,
''
6.14
%
108.281
1
Template
:
Cite_Q
''
,
''
3.50
%
61.649
1
Template
:
Pp-protected
''
,
''
3.36
%
59.211
3
Template
:
Fix
''
,
''
2.97
%
52.321
1
Template
:
Infobox_software/simple
''
]
}
,
''
scribunto
''
:
{
``
limitreport-timeusage
''
:
{
``
value
''
:
''
0.948
''
,
''
limit
''
:
''
10.000
''
}
,
''
limitreport-memusage
''
:
{
``
value
''
:10072262
,
''
limit
''
:52428800
}
}
,
''
cachereport
''
:
{
``
origin
''
:
''
mw2235
''
,
''
timestamp
''
:
''
20181005225237
''
,
''
ttl
''
:86400
,
''
transientcontent
''
:
true
}
}
}
)
;
mw.config.set
(
{
``
wgBackendResponseTime
''
:100
,
''
wgHostname
''
:
''
mw2228
''
}
)
;
}
)
;
